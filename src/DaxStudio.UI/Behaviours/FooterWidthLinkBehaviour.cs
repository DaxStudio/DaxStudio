using System;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace DaxStudio.UI.Behaviours   
{
    public static class FooterWidthLinkBehavior
    {
        public static DataGrid GetFooterGrid(DependencyObject obj)
            => (DataGrid)obj.GetValue(FooterGridProperty);

        public static void SetFooterGrid(DependencyObject obj, DataGrid value)
            => obj.SetValue(FooterGridProperty, value);

        public static readonly DependencyProperty FooterGridProperty =
            DependencyProperty.RegisterAttached(
                "FooterGrid",
                typeof(DataGrid),
                typeof(FooterWidthLinkBehavior),
                new PropertyMetadata(null, OnFooterGridChanged));

        private static void OnFooterGridChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (!(d is DataGrid main) ||!( e.NewValue is DataGrid footer)) return;

            void Attach()
            {
                // Ensure same column count
                if (main.Columns.Count != footer.Columns.Count) return;

                LinkOrder(main, footer);
                LinkWidths(main, footer);

                // Keep order and widths synced if user reorders/resizes
                main.ColumnReordered -= Main_ColumnReordered;
                main.ColumnReordered += Main_ColumnReordered;

                // Watch for columns added/removed
                main.AutoGeneratedColumns -= Main_AutoGeneratedColumns;
                main.AutoGeneratedColumns += Main_AutoGeneratedColumns;

                // Fallback: listen to ActualWidth changes to force update
                foreach (var col in main.Columns)
                {
                    var dpd = DependencyPropertyDescriptor.FromProperty(DataGridColumn.WidthProperty, typeof(DataGridColumn));
                    dpd.AddValueChanged(col, (_, __) => CopyWidth(col, footer));
                }
            }

            if (main.IsLoaded && footer.IsLoaded) Attach();
            else
            {
                RoutedEventHandler onLoaded = null!;
                onLoaded = (_, __) =>
                {
                    if (main.IsLoaded && footer.IsLoaded)
                    {
                        main.Loaded -= onLoaded;
                        footer.Loaded -= onLoaded;
                        Attach();
                    }
                };
                main.Loaded += onLoaded;
                footer.Loaded += onLoaded;
            }

            void Main_AutoGeneratedColumns(object? sender, EventArgs args)
            {
                if (main.Columns.Count == footer.Columns.Count)
                {
                    LinkOrder(main, footer);
                    LinkWidths(main, footer);
                }
            }

            void Main_ColumnReordered(object? sender, DataGridColumnEventArgs args)
            {
                LinkOrder(main, footer);
                // Width links remain valid; we just re-order footer columns.
            }
        }

        private static void LinkOrder(DataGrid main, DataGrid footer)
        {
            // Order footer columns to match main.DisplayIndex
            var ordered = main.Columns.OrderBy(c => c.DisplayIndex).ToList();
            for (int i = 0; i < ordered.Count; i++)
            {
                var targetIndex = i;
                var correspondingFooter = footer.Columns.FirstOrDefault(fc => GetHeaderKey(fc) == GetHeaderKey(ordered[i]))
                                          ?? footer.Columns.ElementAtOrDefault(i);
                if (correspondingFooter != null)
                    correspondingFooter.DisplayIndex = targetIndex;
            }
        }

        private static string GetHeaderKey(DataGridColumn c)
            => c.Header?.ToString() ?? $"col{c.DisplayIndex}";

        private static void LinkWidths(DataGrid main, DataGrid footer)
        {
            int count = Math.Min(main.Columns.Count, footer.Columns.Count);
            for (int i = 0; i < count; i++)
            {
                var mainCol = main.Columns[i];
                var footCol = footer.Columns[i];

                // Clear previous bindings
                BindingOperations.ClearBinding(footCol, DataGridColumn.WidthProperty);

                // Two-way binding to DataGridColumn.Width so drag-resize updates footer
                var b = new Binding(nameof(DataGridColumn.Width))
                {
                    Source = mainCol,
                    Mode = BindingMode.TwoWay
                };
                BindingOperations.SetBinding(footCol, DataGridColumn.WidthProperty, b);

                // Initial sync in case value coercion is pending
                CopyWidth(mainCol, footer);
            }
        }

        private static void CopyWidth(DataGridColumn mainCol, DataGrid footer)
        {
            var idx = mainCol.DisplayIndex;
            if (idx < 0 || idx >= footer.Columns.Count) return;

            var footCol = footer.Columns[idx];
            if (BindingOperations.IsDataBound(footCol, DataGridColumn.WidthProperty)) return;

            footCol.Width = mainCol.Width; // fallback assignment
        }
    }
}
