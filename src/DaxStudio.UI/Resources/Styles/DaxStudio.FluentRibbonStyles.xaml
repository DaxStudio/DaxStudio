<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent"
                    xmlns:converters="clr-namespace:Fluent.Converters;assembly=Fluent"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:ctrl="clr-namespace:DaxStudio.UI.Controls"
                    mc:Ignorable="d"
                    >
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary  Source="pack://application:,,,/DaxStudio.UI;Component/Resources/Styles/FluentRibbon/Menu.xaml"/>
        <!--<ResourceDictionary  Source="pack://application:,,,/DaxStudio.UI;Component/Resources/Styles/FluentRibbon/MenuItem.xaml"/>
        <ResourceDictionary  Source="pack://application:,,,/DaxStudio.UI;Component/Resources/Styles/FluentRibbon/RibbonTabControl.xaml"/>-->
    </ResourceDictionary.MergedDictionaries>

    <DrawingImage x:Key="Fluent.Ribbon.Images.RibbonDisplayOptions"  Drawing="{DynamicResource expandDrawingGroup}" />
    <DrawingImage x:Key="Fluent.Ribbon.Images.RibbonCollapse"  Drawing="{DynamicResource collapseDrawingGroup}" />
    <DrawingImage x:Key="Fluent.Ribbon.Images.RibbonExpand"  Drawing="{DynamicResource expandDrawingGroup}" />

    <ControlTemplate TargetType="{x:Type Fluent:RibbonTabItem}"
                       x:Key="DaxStudioRibbonTabItemControlTemplate">
    <Grid x:Name="grid"
          Height="Auto">
      <Border x:Name="groupBorder"
              Margin="0,0,0,1"
              BorderThickness="0"
              Background="{Binding Group.Background, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=Transparent}"
              OpacityMask="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Contextual.Background.OpacityMask}" />
      <Border x:Name="selectedBorder"
              Visibility="Collapsed"
              VerticalAlignment="Stretch"
              BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}"
              BorderThickness="0,0,0,3"
              Margin="8,0,8,1"
              Background="{TemplateBinding ActiveTabBackground}" />

      <Border x:Name="mouseOverBorder"           
              BorderThickness="0,0,0,3"
              Margin="2,0,2,1"
              Background="{TemplateBinding Background}"
               />
      <Border x:Name="PART_ContentContainer"
              HorizontalAlignment="Stretch"
              VerticalAlignment="Stretch"
              Padding="{TemplateBinding HeaderPadding}">
        <ContentControl x:Name="PART_HeaderContentHost"
                        Focusable="False"
                        AutomationProperties.Name="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"
                        AutomationProperties.AutomationId="{TemplateBinding Name}"
                        Content="{TemplateBinding Header}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}" />
      </Border>
      <Grid x:Name="separatorGrid"
            Margin="0"
            Visibility="Collapsed"
            HorizontalAlignment="Right"
            Width="1">
        <Rectangle x:Name="separatorRectangle1"
                   Fill="{TemplateBinding BorderBrush}"
                   Stroke="{TemplateBinding BorderBrush}"
                   Margin="0"
                   Width="1">
        </Rectangle>
      </Grid>
    </Grid>

    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled"
               Value="False">
        <Setter Property="Opacity"
                TargetName="PART_ContentContainer"
                Value="0.5" />
      </Trigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Fluent:RibbonTabControl}, Path=SelectedItem}"
                   Value="{x:Null}">
        <Setter TargetName="groupBorder"
                Property="Margin"
                Value="0" />
      </DataTrigger>
      <Trigger Property="IsSeparatorVisible"
               Value="True">
        <Setter Property="Visibility"
                TargetName="separatorGrid"
                Value="Visible" />
        <Setter Property="Margin"
                TargetName="selectedBorder"
                Value="0,0,1,0" />
      </Trigger>
      <Trigger Property="Group"
               Value="{x:Null}">
        <Setter Property="Visibility"
                TargetName="groupBorder"
                Value="Collapsed" />
      </Trigger>
      <Trigger Property="Selector.IsSelected"
               Value="True">
        <Setter Property="Visibility"
                TargetName="selectedBorder"
                Value="Visible" />
        <Setter
              TargetName="PART_HeaderContentHost"
              Property="FontWeight"
              Value="Bold"/>
       </Trigger>
      <!-- Foreground for Selected, with group -->
      <Trigger Property="Selector.IsSelected"
               Value="True">
        <Setter Property="Foreground"
                Value="{Binding Group.TabItemSelectedForeground, RelativeSource={RelativeSource Self}}" />
      </Trigger>
      <!-- Foreground for selected, no group -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelected"
                     Value="True" />
          <Condition Property="Group"
                     Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground"
                Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Selected.Foreground}" />
      </MultiTrigger>
      <!-- Background and foreground for MouseOver, with group -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver"
                     SourceName="grid"
                     Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background"
                Value="{Binding Path=(Fluent:RibbonProperties.MouseOverBackground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground"
                Value="{Binding Group.TabItemMouseOverForeground, RelativeSource={RelativeSource Self}}" />
                <Setter Property="BorderBrush" 
                        TargetName="mouseOverBorder"
                        Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}"/>
        </MultiTrigger>
        <!-- Foreground for selected MouseOver, with group -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver"
                     SourceName="grid"
                     Value="True" />
          <Condition Property="Selector.IsSelected"
                     Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground"
                Value="{Binding Group.TabItemSelectedMouseOverForeground, RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <!-- Background and foreground for MouseOver, no group -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver"
                     SourceName="grid"
                     Value="True" />
          <Condition Property="Group"
                     Value="{x:Null}" />
        </MultiTrigger.Conditions>
                <Setter Property="Background"
                Value="{Binding Path=(Fluent:RibbonProperties.MouseOverBackground), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground"
                Value="{Binding Path=(Fluent:RibbonProperties.MouseOverForeground), RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <!-- Background for Selected, Minimized, IsOpen, with group -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelected"
                     Value="True" />
          <Condition Property="IsMinimized"
                     Value="True" />
          <Condition Property="IsOpen"
                     Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background"
                TargetName="grid"
                Value="Transparent" />
      </MultiTrigger>
      <!-- Background for Selected, Minimized, IsOpen, no group -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelected"
                     Value="True" />
          <Condition Property="IsMinimized"
                     Value="True" />
          <Condition Property="IsOpen"
                     Value="True" />
          <Condition Property="Group"
                     Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter Property="Background"
                TargetName="grid"
                Value="Transparent" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>


    
    <Style
       TargetType="{x:Type Fluent:RibbonTabItem}"
         BasedOn="{StaticResource RibbonTabItemStyle}">
        <Setter Property="Template"
        Value="{DynamicResource DaxStudioRibbonTabItemControlTemplate}" />
    </Style>

    <Style TargetType="{x:Type Fluent:RibbonTabControl}"
           BasedOn="{StaticResource {x:Type Fluent:RibbonTabControl}}">
        <Setter Property="Margin" Value="0 0 0 3"/>
    </Style>
    
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

        <ControlTemplate x:Key="RibbonWindowControlTemplate"
                     TargetType="{x:Type Fluent:RibbonWindow}">
        <!--CornerRadius="8" 
                ClipToBounds="True"-->
        <!-- Background="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Background}" -->
            <ctrl:ClipBorder
                CornerRadius="0"
                Background="Transparent">
            <Grid LayoutTransform="{Binding LayoutTransform, RelativeSource={RelativeSource TemplatedParent}}"
              RenderTransform="{Binding RenderTransform, RelativeSource={RelativeSource TemplatedParent}}">
                <AdornerDecorator x:Name="Adorner">
                    <!-- CornerRadius="8" 
                    ClipToBounds="True"-->
                <Border 
                    Background="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Background}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <DockPanel Grid.Row="0"
                               Height="{TemplateBinding TitleBarHeight}"
                               HorizontalAlignment="Stretch"
                               VerticalAlignment="Top"
                               Background="{TemplateBinding TitleBackground}"
                               LastChildFill="True">
                                <!-- Source="{Fluent:IconConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}},
                                                             {Binding RelativeSource={RelativeSource Self}}}"-->
                            <Image x:Name="PART_Icon"
                               Width="36"
                               Height="16"
                               Margin="6 2 2 0"
                               VerticalAlignment="{TemplateBinding VerticalIconAlignment}"
                               DockPanel.Dock="Left"
                               SnapsToDevicePixels="True"
                                   Source="{DynamicResource logo_smallDrawingImage}"
                               
                               Stretch="Uniform"
                               Visibility="{TemplateBinding IsIconVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />

                            <ContentPresenter x:Name="PART_WindowCommands"
                                          Grid.Row="0"
                                          HorizontalAlignment="Right"
                                          Panel.ZIndex="1"
                                          Content="{TemplateBinding WindowCommands}"
                                          DockPanel.Dock="Right" />

                            <Fluent:RibbonTitleBar x:Name="PART_RibbonTitleBar"
                                               Foreground="{TemplateBinding TitleForeground}"
                                               Header="{TemplateBinding Title}"
                                               IsCollapsed="{TemplateBinding IsCollapsed}" />
                        </DockPanel>

                        <ContentPresenter x:Name="PART_ContentPresenter"
                                      Grid.Row="1" />
                    </Grid>
                </Border>
            </AdornerDecorator>
                <!-- 
                Cannot set CornerRadius to 8 since we need to set the application window to AllowsTransparency=true and this breaks 
                the AvalonDock unpinned tool windows 
                -->
                <ctrl:ClipBorder x:Name="PART_Border"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Background="{x:Null}"
                    ClipToBounds="True"
                    CornerRadius="0"
                    BorderBrush="{TemplateBinding GlowBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    UseLayoutRounding="True" />

                <ResizeGrip x:Name="WindowResizeGrip"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Bottom"
                        IsTabStop="false"
                        Visibility="Collapsed" />
            </Grid>
        </ctrl:ClipBorder>

        <ControlTemplate.Triggers>
                <Trigger Property="IsActive" Value="False">
                    <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=NonActiveGlowBrush, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    <Setter TargetName="PART_WindowCommands" Property="Opacity" Value="0.5" />
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsActive" Value="False" />
                        <Condition Property="NonActiveGlowBrush" Value="{x:Null}" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=NonActiveBorderBrush, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsActive" Value="True" />
                        <Condition Property="GlowBrush" Value="{x:Null}" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=BorderBrush, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                        <Condition Property="WindowState" Value="Normal" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="PART_Border" Property="Visibility" Value="Visible" />
                    <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                </MultiTrigger>
                <Trigger Property="WindowState" Value="Maximized">
                    <Setter TargetName="Adorner" Property="Margin" Value="0" />
                    <Setter TargetName="PART_Border" Property="Visibility" Value="Collapsed" />
                    <Setter TargetName="PART_Icon" Property="Margin" Value="2 2 0 0" />
                    <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Collapsed" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

    <Style x:Key="DaxStudioRibbonWindowStyle"
           TargetType="{x:Type Fluent:RibbonWindow}">
            <!--<Setter Property="Background" Value="{DynamicResource WhiteBrush}" />-->
            <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
            <Setter Property="BorderThickness" Value="1" />
            <!--<Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />-->
            
            <Setter Property="GlowBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
            <Setter Property="NonActiveBorderBrush" Value="#434346" />
            <Setter Property="NonActiveGlowBrush" Value="#434346" />
            <Setter Property="Template" Value="{StaticResource RibbonWindowControlTemplate}" />
            <Setter Property="TitleBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonWindow.TitleBackground}" />
            <Setter Property="TitleBarHeight" Value="{DynamicResource {x:Static SystemParameters.WindowCaptionHeightKey}}" />
            <Setter Property="TitleForeground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonWindow.TitleForeground}" />
        <!--<Setter Property="Source" TargetName="PART_Icon" Value="{DynamicResource logo_smallDrawingImage}"/>-->
    </Style>


</ResourceDictionary>