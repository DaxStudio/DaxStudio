<UserControl x:Class="DaxStudio.UI.Views.OptionsView" 
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
            xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
            xmlns:fluent="urn:fluent-ribbon" 
            xmlns:conv="clr-namespace:DaxStudio.UI.Converters"
            xmlns:controls="clr-namespace:DaxStudio.UI.Controls"
            xmlns:beh="clr-namespace:DaxStudio.UI.Behaviours"
            xmlns:fa="http://schemas.fontawesome.io/icons/"
            xmlns:wmc="clr-namespace:WatermarkControlsLib.Controls;assembly=WatermarkControlsLib"
            xmlns:nud="clr-namespace:NumericUpDownLib;assembly=NumericUpDownLib"
            xmlns:pg="clr-namespace:DaxStudio.Controls.PropertyGrid;assembly=DaxStudio.Controls.PropertyGrid"
            xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
            xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
            xmlns:sys="clr-namespace:System;assembly=mscorlib"
            xmlns:val="clr-namespace:DaxStudio.UI.Validation" xmlns:cal="http://www.caliburnproject.org"
            xmlns:templateSelectors="clr-namespace:DaxStudio.UI.TemplateSelectors"
            mc:Ignorable="d" 
            d:DesignHeight="1008" d:DesignWidth="1400">
    <UserControl.Resources>
        <ResourceDictionary>
            <conv:FontConverter x:Key="FontConverter"/>
            <conv:EnumDescriptionConverter x:Key="EnumDescriptionConverter"/>
            <conv:BoolToNotVisibleConverter x:Key="BoolToNotVisibleConverter" />
            <conv:IntToDoubleConverter x:Key="IntToDoubleConverter" />
            <conv:HotKeyConverter x:Key="HotKeyConverter" />
            <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
            <conv:BoolToHiddenConverter x:Key="BoolToHiddenConverter"/>
            <conv:DataBindingDebugConverter x:Key="DataBindingDebugConverter"/>
            
            <ElasticEase x:Key="easeSlideIn" EasingMode="EaseInOut" Oscillations="2" Springiness="15"/>
            <SineEase x:Key="easeSlideOut" EasingMode="EaseInOut"/>
            
            <Storyboard x:Key="FadeIn">
                <DoubleAnimation Storyboard.TargetProperty="Opacity" 
                                     EasingFunction="{StaticResource ResourceKey=easeSlideIn}"
                                     From="0.0"
                                     To="1.0"
                                     Duration="0:0:1.0"/>
                <ObjectAnimationUsingKeyFrames  Storyboard.TargetProperty="Visibility" BeginTime="0:0:0.0" Duration="0">
                    <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" />
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="FadeOut">
                <DoubleAnimation Storyboard.TargetProperty="Opacity" 
                         EasingFunction="{StaticResource ResourceKey=easeSlideOut}" 
                         To="0.0" 
                         Duration="0:0:0.3"/>
                <ObjectAnimationUsingKeyFrames  Storyboard.TargetProperty="Visibility" BeginTime="0:0:0.2" Duration="0">
                    <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" />
                </ObjectAnimationUsingKeyFrames>

            </Storyboard>

            <!-- Styles -->
            <Style x:Key="FadeInOut" TargetType="StackPanel">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ShowHotkeyWarningMessage}" Value="True" >
                        <DataTrigger.EnterActions>
                            <BeginStoryboard Storyboard="{StaticResource FadeIn}" x:Name="In"/>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="In"/>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ShowHotkeyWarningMessage}" Value="False">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard Storyboard="{StaticResource FadeOut}" x:Name="Out"/>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="Out"/>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type wmc:WatermarkTextBox}">
                <Style.Triggers>
                    <Trigger Property="IsReadOnly" Value="True">
                        <Setter Property="Background" Value="LightGray" />
                    </Trigger>
                    <Trigger Property="IsReadOnly" Value="False">
                        <Setter Property="Background" Value="White" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <Style TargetType="{x:Type TextBox}">
                <Style.Triggers>
                    <Trigger Property="IsReadOnly" Value="True">
                        <Setter Property="Background" Value="LightGray" />
                    </Trigger>
                    <Trigger Property="IsReadOnly" Value="False">
                        <Setter Property="Background" Value="White" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <Style TargetType="{x:Type PasswordBox}">
                <Style.Triggers>
                    <Trigger Property="Focusable" Value="False">
                        <Setter Property="Background" Value="LightGray" />
                    </Trigger>
                    <Trigger Property="Focusable" Value="True">
                        <Setter Property="Background" Value="White" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type GroupBox}">
                <Setter Property="Margin" Value="5"/>
                <Setter Property="MinWidth" Value="300"/>
                <Setter Property="Foreground" Value="{StaticResource DaxStudioBrush}"/>
                <Setter Property="Width" Value="375" />
                <Setter Property="Padding" Value="5"/>
            </Style>
            <!--<Style TargetType="{x:Type TextBox}">
                <Style.Resources>
                    <SolidColorBrush 
                    x:Key="{x:Static SystemColors.ControlBrushKey}" 
                    Color="Blue" />
                </Style.Resources>
            </Style>-->

            <Style x:Key="checkboxLeftSideText" TargetType="{x:Type CheckBox}">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="FocusVisualStyle"  Value="{DynamicResource CheckBoxFocusVisual}"/>
                <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">

                            <DockPanel 
                              HorizontalAlignment="Stretch" 
                              VerticalAlignment="Top" 
                              Width="Auto" 
                              LastChildFill="True">

                                <Microsoft_Windows_Themes:BulletChrome 
                                DockPanel.Dock="Right" 
                                Margin="7,0,0,0"
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                IsChecked="{TemplateBinding IsChecked}" 
                                RenderMouseOver="{TemplateBinding IsMouseOver}" 
                                RenderPressed="{TemplateBinding IsPressed}" 
                                HorizontalAlignment="Stretch" 
                                VerticalAlignment="Center" 
                                Width="Auto" 
                                Height="Auto"/>

                                <ContentPresenter 
                                Content="{TemplateBinding Content}" 
                                RecognizesAccessKey="True" 
                                Height="Auto" 
                                HorizontalAlignment="Left" />
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Category Icons -->
            <conv:ResourceLookupConverter x:Key="CategoryIcons">
                <ResourceDictionary>
                    <fa:ImageAwesome x:Key="Custom Export Format"  Icon="Download" Width="16"/>
                    <fa:ImageAwesome x:Key="Dax Formatter" Icon="Pencil" Width="16"/>
                    <fa:ImageAwesome x:Key="Defaults" Icon="Pencil" Width="16"/>
                    <fa:ImageAwesome x:Key="Editor" Icon="Pencil" Width="16"/>
                    <fa:ImageAwesome x:Key="Metadata Pane" Icon="Pencil" Width="16"/>
                    <fa:ImageAwesome x:Key="Proxy" Icon="Pencil" Width="16"/>
                    <fa:ImageAwesome x:Key="Privacy" Icon="UserSecret" Width="16" />
                    <fa:ImageAwesome x:Key="Query History" Icon="Pencil" Width="16"/>
                    <fa:ImageAwesome x:Key="Results" Icon="Pencil" Width="16"/>
                    <fa:ImageAwesome x:Key="Server Timings" Icon="Pencil" Width="16"/>
                    <fa:ImageAwesome x:Key="Timeouts" Icon="Pencil" Width="16"/>
                    <fa:ImageAwesome x:Key="Trace" Icon="Pencil" Width="16"/>
                </ResourceDictionary>
            </conv:ResourceLookupConverter>

            <conv:ResourceLookupConverter x:Key="CategoryIconNames">
                <ResourceDictionary>
                    <sys:String x:Key="Custom Export Format">Download</sys:String>
                    <sys:String x:Key="Dax Formatter">AlignLeft</sys:String>
                    <sys:String x:Key="Defaults">Sliders</sys:String>
                    <sys:String x:Key="Editor">Pencil</sys:String>
                    <sys:String x:Key="Metadata Pane">Sitemap</sys:String>
                    <sys:String x:Key="Proxy">Wifi</sys:String>
                    <sys:String x:Key="Privacy">UserSecret</sys:String>
                    <sys:String x:Key="Query History">History</sys:String>
                    <sys:String x:Key="Results">Table</sys:String>
                    <sys:String x:Key="Server Timings">Database</sys:String>
                    <sys:String x:Key="Sounds">VolumeUp</sys:String>
                    <sys:String x:Key="Timeouts">ClockOutline</sys:String>
                    <sys:String x:Key="Trace">Search</sys:String>
                </ResourceDictionary>
            </conv:ResourceLookupConverter>

            <!-- PropertyList Styles Start -->


            <templateSelectors:OptionsPropertyTemplateSelector x:Key="OptionsPropertyTemplateSelector" />
            <pg:DescriptionAttributeConverter x:Key="DescriptionAttributeConverter"/>

            <Style x:Key="DescriptionStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="FontStyle" Value="Italic"/>
                <Setter Property="Text" Value="{Binding Description}"/>
                <Setter Property="Visibility" Value="{Binding ShowDescription}"/>
                <Setter Property="Margin" Value="0,0,0,15"/>
                <Setter Property="TextWrapping" Value="Wrap"/>
                <Setter Property="Grid.Row" Value="1"/>
                <Setter Property="Foreground" Value="Gray"/>
            </Style>


            <DataTemplate x:Key="GenericTemplate">
                <StackPanel>
                    <TextBox Text="{Binding Value}" MinWidth="250" IsEnabled="{Binding ValueEnabled}"/>
                    <TextBlock Style="{StaticResource DescriptionStyle}"/>
                </StackPanel>
            </DataTemplate>


            <DataTemplate x:Key="PasswordTemplate">
                <StackPanel>
                    <PasswordBox MinWidth="250" IsEnabled="{Binding ValueEnabled}" >
                        
                            <i:Interaction.Behaviors>
                                <beh:PasswordBoxBindingBehavior SecurePassword="{Binding Value}"/>
                            </i:Interaction.Behaviors>

                    </PasswordBox>
                    <TextBlock Style="{StaticResource DescriptionStyle}"/>
                </StackPanel>
            </DataTemplate>

                <DataTemplate x:Key="BoolTemplate">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <CheckBox IsChecked="{Binding Value}" IsEnabled="{Binding ValueEnabled}" Grid.Row="0"/>
                    <TextBlock Style="{StaticResource DescriptionStyle }"/>
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="DoubleTemplate">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <nud:DoubleUpDown  Value="{Binding Value,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
                                       IsReadOnly="False" 
                                       IsEnabled="{Binding ValueEnabled}"
                                       MinValue="{Binding MinValue, Mode=OneTime}" 
                                       MaxValue="{Binding MaxValue, Mode=OneTime}" 
                                       FormatString="#,#.0"
                                       DisplayLength="5"
                                       Width="140"
                                       Margin="2"  
                                       HorizontalAlignment="Left"></nud:DoubleUpDown>

                    <TextBlock Style="{StaticResource DescriptionStyle }"/>
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="IntegerTemplate">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <nud:NumericUpDown  Value="{Binding Value,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
                                        IsReadOnly="False" 
                                        IsEnabled="{Binding ValueEnabled}"
                                        MinValue="{Binding MinValue, Mode=OneTime}" 
                                        MaxValue="{Binding MaxValue, Mode=OneTime}" 
                                        MinWidth="120"
                                        DisplayLength="5"
                                        Margin="2"  
                                        HorizontalAlignment="Left"/>

                    <TextBlock Style="{StaticResource DescriptionStyle }"/>
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="FontFamilyTemplate">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <ComboBox x:Name="EditorFontFamily" Grid.Row="0" Grid.Column="1"
			                        xmlns:ComponentModel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
			                        ItemTemplate="{DynamicResource FontTemplate}"
                                    SelectedItem="{Binding Path=Value, Mode=TwoWay, Converter={StaticResource FontConverter}}"
                                    IsSynchronizedWithCurrentItem="True"
                                    VerticalContentAlignment="Center"      >
                        <ComboBox.Resources>

                            <CollectionViewSource x:Key="myFonts" Source="{Binding Source={x:Static Fonts.SystemFontFamilies}}">
                                <CollectionViewSource.SortDescriptions>
                                    <ComponentModel:SortDescription PropertyName="Source" />
                                </CollectionViewSource.SortDescriptions>
                            </CollectionViewSource>

                            <Style x:Key="FontStyle">
                                <Setter Property="Control.FontFamily" Value="{Binding Source}" />
                                <Setter Property="Control.FontSize" Value="14" />
                            </Style>

                            <DataTemplate x:Key="FontTemplate">
                                <StackPanel VirtualizingStackPanel.IsVirtualizing="True">
                                    <TextBlock Style="{StaticResource FontStyle}"
                                           Text="{Binding Source}"
                                           ToolTip="{Binding Source}" />
                                </StackPanel>
                            </DataTemplate>

                        </ComboBox.Resources>

                        <ComboBox.ItemsSource>
                            <Binding Source="{StaticResource myFonts}" />
                        </ComboBox.ItemsSource>
                    </ComboBox>
                    <TextBlock Style="{StaticResource DescriptionStyle }"/>
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="SoundTemplate">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="1" Orientation="Horizontal">
                    <ComboBox ItemsSource="{pg:EnumerateBinding Value}" 
                              SelectedValue="{Binding Value, Mode=TwoWay}"  
                              Grid.Row="0"
                              IsEnabled="{Binding ValueEnabled}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock 
                                    Text="{Binding Converter={StaticResource DescriptionAttributeConverter}, Mode=OneWay}"
                                    TextTrimming="CharacterEllipsis"/>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                        <Button Margin="10 0 0 0" 
                                Padding="10 0" 
                                IsEnabled="{Binding ValueEnabled}"
                                cal:Message.Attach="[Event Click] = [Action PlaySound($dataContext)]"><fa:ImageAwesome Icon="Play" Width="10" Foreground="Green"></fa:ImageAwesome></Button>
                        
                    </StackPanel>
                    <TextBlock Grid.ColumnSpan="2" Style="{StaticResource DescriptionStyle }"/>
                </Grid>
            </DataTemplate>


            <DataTemplate x:Key="EnumTemplate">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <ComboBox ItemsSource="{pg:EnumerateBinding Value}" SelectedValue="{Binding Value, Mode=TwoWay}"  Grid.Row="0">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock 
                                    Text="{Binding Converter={StaticResource DescriptionAttributeConverter}, Mode=OneWay}"
                                    TextTrimming="CharacterEllipsis"/>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                    <TextBlock Grid.ColumnSpan="2" Style="{StaticResource DescriptionStyle }"/>
                </Grid>
            </DataTemplate>

            <Style TargetType="{x:Type pg:PropertyList}">
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="ListViewItem">
                            <Setter Property="VerticalContentAlignment" Value="Top"/>
                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ItemStyle" TargetType="{x:Type ListViewItem}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="VerticalContentAlignment" Value="Top"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Grid Background="{TemplateBinding Background}">
                                <Border Name="Selection" Visibility="Collapsed" />
                                <!-- This is used when GridView is put inside the ListView -->
                                <GridViewRowPresenter Grid.RowSpan="1"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style TargetType="{x:Type GridViewColumnHeader}">
                <Setter Property="Visibility" Value="Collapsed" />
            </Style>


            <GroupStyle x:Key="PropertyGroup">
                <GroupStyle.HeaderTemplate>
                    <DataTemplate>
                        <Border BorderBrush="Red" BorderThickness="1">
                            <TextBlock FontWeight="Bold" FontSize="14" Text="{Binding Name}" Margin="20,20,20,20"/>
                        </Border>
                    </DataTemplate>
                </GroupStyle.HeaderTemplate>
            </GroupStyle>
            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--<SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
        <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>-->
            <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#3DDADADA"/>
            <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
            <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
            <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
            <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3DDADADA"/>
            <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>
            <SolidColorBrush x:Key="Item.Selected.Bar" Color="#FF26A0DA"/>
            
            <Style x:Key="ListBoxItemStyle1" TargetType="{x:Type ListBoxItem}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="4,1"/>
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Padding" Value="2,5"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <StackPanel Orientation="Horizontal" >
                                    <Rectangle x:Name="Hl" Width="3"  Margin="0,0,1,0" Fill="Transparent"/>
                                    <fa:FontAwesome Icon="{Binding Converter={StaticResource CategoryIconNames}}" Width="20" FontSize="14" Margin="5,0" />

                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                                    <!--<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>-->
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                        <Condition Property="IsSelected" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                                    <Setter Property="Fill" TargetName="Hl" Value="{StaticResource Item.Selected.Bar}"/>
                                    <!--<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>-->
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                        <Condition Property="IsSelected" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                                    <Setter Property="Fill" TargetName="Hl" Value="{StaticResource Item.Selected.Bar}"/>
                                    <!--<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>-->
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <!-- PropertyList Styles End -->
            
            
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary  Source="pack://application:,,,/DaxStudio.UI;Component/Resources/IconResourceDictionary.xaml"/>
                <ResourceDictionary  Source="pack://application:,,,/DaxStudio.UI;Component/Resources/DaxStudioResources.xaml"/>
            </ResourceDictionary.MergedDictionaries>

        </ResourceDictionary>


    </UserControl.Resources>
    <Grid Margin="35,25,5,5">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="261*"/>
            <ColumnDefinition Width="169*"/>

        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>

        </Grid.RowDefinitions>
        <Label Content="Options" Foreground="{StaticResource DaxStudioBrush}" FontSize="56" FontWeight="Light" 
			Grid.Row="0"
			Grid.Column="0" Grid.ColumnSpan="2" Margin="0,0,0,0.5"/>
        <!-- Editor -->
        <TabControl Grid.ColumnSpan="2" Margin="0,84,20,10" Grid.RowSpan="2">
            <TabItem Header="Standard">

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <TextBlock Text="Options" FontSize="18" FontWeight="Bold" Margin="5"/>
                    <!-- -->
                    <Grid>
                        <wmc:WatermarkTextBox x:Name="Search" Text="{Binding SearchText,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" 
                             MinWidth="100" 
                             Grid.Row="1" 
                             Margin="5" 
                             Padding="5" Watermark="Search"/>
                        <Button Margin="10" Grid.Column="1" HorizontalAlignment="Right" Padding="5"
                                                Visibility="{Binding Path=HasSearchText, Converter={StaticResource BoolToVisibilityConverter}}"
                                                BorderThickness="0"
                                                Background="Transparent">
                            <fa:ImageAwesome Icon="Times" Width="8" Margin="0" />
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <cal:ActionMessage MethodName="ClearSearchText" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>
                    </Grid>
                    <ListBox x:Name="Categories" Grid.Row="2" 
                        ItemsSource="{Binding Categories}" 
                        SelectedValue="{Binding SelectedCategory}" 
                        MinWidth="50" 
                        ItemContainerStyle="{DynamicResource ListBoxItemStyle1}"
                        BorderThickness="0"
                        Margin="5"/>
                    <!-- SearchText="{Binding ElementName=Search, Path=Text}" -->
                    <Border Grid.Column="1" Grid.RowSpan="3" Padding="15,0" Margin="10,5" BorderThickness="1,0,0,0" BorderBrush="DarkGray">
                    <pg:PropertyList Source="{Binding .}" 
                        Grid.RowSpan="3"
                        CategoryFilter="{Binding SelectedCategory}"
                        SearchText="{Binding SearchText}"
                        ItemTemplateSelector="{StaticResource OptionsPropertyTemplateSelector}"
                        Grid.Column="1" 
                        ItemContainerStyle="{StaticResource ItemStyle}"
                        pg:ListViewBehaviors.IsAutoUpdatingColumnWidths="true"
                        BorderThickness="0"
                        Margin="0"
                        VirtualizingPanel.IsVirtualizing="True"
                        Padding="0" beh:GridViewColumnResize.Enabled="True">
                        <pg:PropertyList.Resources>
                            <!--<Style TargetType="ListViewItem" BasedOn="{StaticResource {x:Type ListViewItem}}">
                    <Setter Property="Background" Value="Transparent"/>
                </Style>-->


                        </pg:PropertyList.Resources>
                        <pg:PropertyList.View >
                            <GridView >
                                <GridViewColumn Width="250" >
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <Grid VerticalAlignment="Top">

                                               <TextBlock Text="{Binding DisplayName}" 
                                                          pg:TextBlockHighlighter.Selection="{Binding ElementName=Search, Path=Text}"
                                                          pg:TextBlockHighlighter.HighlightColor="Yellow"
                                                          VerticalAlignment="Top" TextWrapping="Wrap"/>    
                                            </Grid>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn CellTemplateSelector="{StaticResource OptionsPropertyTemplateSelector}"
                                     beh:GridViewColumnResize.Width="2*">

                                </GridViewColumn>
                            </GridView>

                        </pg:PropertyList.View>
                        <pg:PropertyList.GroupStyle>
                            <GroupStyle>
                                <GroupStyle.HeaderTemplate>
                                    <DataTemplate>
                                        <TextBlock FontWeight="Bold" FontSize="14" Text="{Binding Name}" Margin="0,10,0,0"
                                                   pg:TextBlockHighlighter.Selection="{Binding ElementName=Search, Path=Text}"
                                                   pg:TextBlockHighlighter.HighlightColor="Yellow"/>
                                    </DataTemplate>
                                </GroupStyle.HeaderTemplate>
                            </GroupStyle>
                        </pg:PropertyList.GroupStyle>
                    </pg:PropertyList>
                    </Border>
                </Grid>


            </TabItem>
            <TabItem Header="Key Bindings" >
                <ScrollViewer x:Name="AdvancedScrollViewer2" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Padding="5">
                    <WrapPanel Width="{Binding ElementName=AdvancedScrollViewer2, Path=ViewportWidth}" Orientation="Horizontal" >
                        <GroupBox Header="Hotkeys" Width="450">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="2*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="24"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <TextBlock Text="Click on the key binding next to a command and type a new key combination or use Esc or backspace to clear a hotkey" 
                                           Foreground="Black" TextWrapping="Wrap"  Grid.ColumnSpan="2" Margin="0,0,0,20"/>
                                <Button Content="Reset All" 
                                        Grid.Column="2" 
                                        x:Name="ResetKeyBindings" Height="22" Width="60" Margin="0,0,0,20"/>

                                <Label Content="Comment Selection" Grid.Row="1" Padding="2" />
                                <!--<controls:HotkeyEditorControl Grid.Column="1" Grid.Row="1" Padding="2" >
                                    <controls:HotkeyEditorControl.Resources>
                                        <val:BindingProxy x:Key="proxy" Data="{Binding}"/>
                                    </controls:HotkeyEditorControl.Resources>
                                    <controls:HotkeyEditorControl.Hotkey>
                                        <Binding Path="HotkeyCommentSelection" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" ValidatesOnNotifyDataErrors="True" NotifyOnValidationError="True" Converter="{StaticResource HotKeyConverter}">
                                            <Binding.ValidationRules>
                                                <val:HotkeyValidationRule ValidationStep="ConvertedProposedValue">
                                                    <val:HotkeyValidationRule.Wrapper>
                                                        <val:Wrapper Options="{Binding Data, Source={StaticResource proxy}}" PropertyName="HotkeyCommentSelection"/>
                                                    </val:HotkeyValidationRule.Wrapper>
                                                </val:HotkeyValidationRule>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </controls:HotkeyEditorControl.Hotkey>
                                </controls:HotkeyEditorControl>-->
                                

                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="1" Padding="2" Hotkey="{Binding HotkeyCommentSelection, Converter={StaticResource HotKeyConverter}, NotifyOnValidationError=True, ValidatesOnNotifyDataErrors=True}"/>


                                <Label Content="Uncomment Selection" Padding="2" Grid.Row="2" />
                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="2" Padding="2" Hotkey="{Binding HotkeyUnCommentSelection, Converter={StaticResource HotKeyConverter}}"/>

                                <Label Content="Run Query" Padding="2" Grid.Row="3" />
                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="3" Padding="2" Hotkey="{Binding HotkeyRunQuery, Converter={StaticResource HotKeyConverter}}"/>
                                <controls:HotkeyEditorControl Grid.Column="2" Grid.Row="3" Padding="2" Hotkey="{Binding HotkeyRunQueryAlt, Converter={StaticResource HotKeyConverter}}"/>
                                
                                <Label Content="Selection To Upper" Padding="2" Grid.Row="4" />
                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="4" Padding="2" Hotkey="{Binding HotkeyToUpper, Converter={StaticResource HotKeyConverter}}"/>

                                <Label Content="Selection To Lower" Padding="2" Grid.Row="5" />
                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="5" Padding="2" Hotkey="{Binding HotkeyToLower, Converter={StaticResource HotKeyConverter}}"/>

                                <Label Content="Open Document" Padding="2" Grid.Row="6" />
                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="6" Padding="2" Hotkey="{Binding HotkeyOpenDocument, Converter={StaticResource HotKeyConverter}}"/>

                                <Label Content="Save Document" Padding="2" Grid.Row="7" />
                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="7" Padding="2" Hotkey="{Binding HotkeySaveDocument, Converter={StaticResource HotKeyConverter}}"/>

                                <Label Content="New Document" Padding="2" Grid.Row="8" />
                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="8" Padding="2" Hotkey="{Binding HotkeyNewDocument, Converter={StaticResource HotKeyConverter}}"/>

                                <Label Content="New Document (Current Connection)" Padding="2" Grid.Row="9" />
                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="9" Padding="2" Hotkey="{Binding HotkeyNewDocumentWithCurrentConnection, Converter={StaticResource HotKeyConverter}}"/>

                                <Label Content="Format Query" Padding="2" Grid.Row="10" />
                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="10" Padding="2" Hotkey="{Binding HotkeyFormatQueryStandard, Converter={StaticResource HotKeyConverter}}"/>

                                <Label Content="Format Query (alternate style)" Padding="2" Grid.Row="11" />
                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="11" Padding="2" Hotkey="{Binding HotkeyFormatQueryAlternate, Converter={StaticResource HotKeyConverter}}"/>

                                <Label Content="Toggle Comment" Padding="2" Grid.Row="12" />
                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="12" Padding="2" Hotkey="{Binding HotkeyToggleComment, Converter={StaticResource HotKeyConverter}}"/>

                                <Label Content="Select Word" Padding="2" Grid.Row="13" />
                                <controls:HotkeyEditorControl Grid.Column="1" Grid.Row="13" Padding="2" Hotkey="{Binding HotkeySelectWord, Converter={StaticResource HotKeyConverter}}"/>


                                <StackPanel Orientation="Horizontal" Style="{StaticResource FadeInOut}" Grid.Row="14" Grid.Column="0" Grid.ColumnSpan="3" Visibility="{Binding ShowHotkeyWarningMessage, Converter={StaticResource BoolToHiddenConverter}}"
                                            HorizontalAlignment="Center">
                                    <fa:FontAwesome Icon="Warning" Foreground="Red" Margin="3"/>
                                    <TextBlock x:Name="HotkeyWarningMessage" Foreground="Red"/>
                                    
                                </StackPanel>
                            </Grid>
                            
                            
                        </GroupBox>
                    </WrapPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="Advanced">
                <ScrollViewer x:Name="AdvancedScrollViewer" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Padding="5">
                    <WrapPanel Width="{Binding ElementName=AdvancedScrollViewer, Path=ViewportWidth}" Orientation="Horizontal" >
                        <GroupBox Header="Publish Functions">
                            <StackPanel>
                                <Button Margin="5" Padding="3" Name="PublishDaxFunctions">Publish Functions</Button>
                                <TextBlock Margin="10,0,0,10" Foreground="{StaticResource MutedTextBrush}" Name="CanPublishDaxFunctionsMessage"></TextBlock>
                                <Button Margin="5" Padding="3" Name="ExportDAXFunctions">Export Functions</Button>
                            </StackPanel>
                        </GroupBox>

                        <GroupBox Header="Preview Features">
                            <Grid Margin="5,5,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20"/>
                                    <ColumnDefinition Width="*"/>

                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <CheckBox Grid.Row="1" Grid.Column="0" x:Name="ShowDebugCommas" VerticalAlignment="Top" Margin="2,7,2,0" Content="Show Debug Commas" Grid.ColumnSpan="2"/>
                                <TextBlock Grid.Row="2" Grid.Column="1" TextWrapping="Wrap" Foreground="Gray" FontStyle="Italic" Margin="2,0,0,0">Show a button to move commas from the end of a line to the beginning of the following line. Activating this featurs hides the Swap Delimiters button.</TextBlock>
                                
                                <CheckBox Grid.Row="3" Grid.Column="0" x:Name="ShowXmlaInAllQueries" VerticalAlignment="Top" Margin="2,7,2,0" Content="Show XMLA Commands" Grid.ColumnSpan="2"/>
                                <TextBlock Grid.Row="4" Grid.Column="1" TextWrapping="Wrap" Foreground="Gray" FontStyle="Italic" Margin="2,0,0,0">Show the XMLA commands in the All Queries window. The new setting will be active after you restart DAX Studio.</TextBlock>


                            </Grid>
                        </GroupBox>
                        <GroupBox Header="VertiPaq Analyzer">
                            <Grid Margin="5,5,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="80"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <CheckBox Grid.Column="0" x:Name="VpaxIncludeTom" VerticalAlignment="Top" Content="Include TOM" Grid.ColumnSpan="2" Margin="2,7,2,0" />
                                <TextBlock Grid.Row="1" Grid.Column="1" TextWrapping="Wrap" Foreground="Gray" FontStyle="Italic" Margin="2,0,0,0">Include the complete Tabular Object Model (TOM) in the export for VertiPaq Analyzer (VPAX)</TextBlock>
                                <CheckBox Grid.Row="2" Grid.Column="0" x:Name="VpaxReadStatisticsFromData" VerticalAlignment="Top" Content="Read statistics from data" Grid.ColumnSpan="2" Margin="2,7,2,0" />
                                <TextBlock Grid.Row="3" Grid.Column="1" TextWrapping="Wrap" Foreground="Gray" FontStyle="Italic" Margin="2,0,0,0">Scan the data to retrieve statistics about columns, tables, and relationships. It could be a long operation in large database.</TextBlock>
                                <Label Grid.Row="4" Grid.Column="1" Content="Sample referential integrity violations:" HorizontalAlignment="Left"/>
                                <nud:NumericUpDown Name="ctrlSampleReferentialIntegrityViolations" Value="{Binding VpaxSampleReferentialIntegrityViolations,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Grid.Row="4" Grid.Column="2" MinValue="0"  MaxValue="1000" Margin="2" Width="100" HorizontalAlignment="Left" IsReadOnly="False"></nud:NumericUpDown>
                            </Grid>
                        </GroupBox>
                    </WrapPanel>
                </ScrollViewer>
            </TabItem>
            <!--<TabItem Header="Debug">
                
            </TabItem>-->
        </TabControl>
    </Grid>
</UserControl>
