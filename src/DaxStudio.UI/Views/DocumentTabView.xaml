<UserControl x:Class="DaxStudio.UI.Views.DocumentTabView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:avalondock="https://github.com/Dirkster99/AvalonDock"
             xmlns:avalonDockControls="https://github.com/Dirkster99/AvalonDock"
             xmlns:avalonDockProperties="clr-namespace:AvalonDock.Properties;assembly=AvalonDock"
             xmlns:avalonDockConverters="clr-namespace:AvalonDock.Converters;assembly=AvalonDock"
             xmlns:reskeys="clr-namespace:AvalonDock.Themes.DaxStudio.Themes;assembly=DaxStudio.AvalonDock.Themes"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:cal="clr-namespace:Caliburn.Micro;assembly=Caliburn.Micro.Platform"
             xmlns:local="clr-namespace:DaxStudio.UI.Converters"
             xmlns:res="clr-namespace:DaxStudio.UI.Resources" 
             xmlns:views="clr-namespace:DaxStudio.UI.Views"
             xmlns:selectors="clr-namespace:DaxStudio.UI.TemplateSelectors"
             xmlns:utils="clr-namespace:DaxStudio.UI.Utils" 
             xmlns:ui="http://schemas.modernwpf.com/2019"
             Background="{DynamicResource Theme.Brush.StatusBar.Back}"
             mc:Ignorable="d" 
             d:DesignHeight="300" 
             d:DesignWidth="300">
    <UserControl.Resources>
        <ResourceDictionary>
            <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
            <local:BoolToHiddenConverter x:Key="BoolToHiddenConverter"/>
            <local:BoolToNotHiddenConverter x:Key="BoolToNotHiddenConverter"/>
            <avalonDockConverters:ActivateCommandLayoutItemFromLayoutModelConverter x:Key="ActivateCommandLayoutItemFromLayoutModelConverter" />
            <ui:BindingProxy x:Key="Proxy"  Value="{Binding}" />
            <Style x:Key="MyCustomDocumentPaneControlStyle" 
                   TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
                <!--BasedOn="{StaticResource AvalonDockThemeVs2013DocumentPaneControlStyle}">-->
                <Setter Property="TabStripPlacement" Value="Bottom"/>
                <Setter Property="Background" Value="{DynamicResource AvalonDock.Control.Background.Brush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock.Control.Background.Brush}"/>
                
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
                            <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <!--Following border is required to catch mouse events-->
                                <Border x:Name="mouseBorder" 
                                        Background="Transparent" 
                                        Grid.RowSpan="2"
                                        />

                                <Grid Panel.ZIndex="1" Grid.Row="1" ClipToBounds="True" Background="{DynamicResource Theme.Brush.StatusBar.Back}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="6"/>
                                    </Grid.ColumnDefinitions>

                                    <Border  
                                        x:Name="ShadowBd"
                                        Grid.ColumnSpan="4"
                                        BorderThickness="0 4 0 0"
                                        BorderBrush="Black"
                                        Background="Transparent"
                                        Margin="0 -4 0 0 ">
                                        <Border.Effect>
                                            <DropShadowEffect  ShadowDepth="0" Direction="270" BlurRadius="10" Opacity="{DynamicResource Theme.DropShadow.Opacity}" Color="{DynamicResource Theme.DropShadow}" />
                                        </Border.Effect>
                                    </Border>

                                    <avalonDockControls:DocumentPaneTabPanel 
                                        x:Name="DocumentHeaderPanel" 
                                        Grid.Column="1" 
                                        Grid.Row="0"
                                        IsItemsHost="true" 
                                        Margin="2,0,2,6"  
                                        Background="Transparent"
                                        KeyboardNavigation.TabIndex="1"/>
                                    <avalonDockControls:DropDownButton
                                            x:Name="MenuDropDownButton"
                                            Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                                            Focusable="False"
                                            Grid.Column="2">
                                        <avalonDockControls:DropDownButton.DropDownContextMenu>
                                            <avalonDockControls:ContextMenuEx
                                                ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}">
                                                <!--<avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                                    <Style TargetType="{x:Type avalonDockControls:MenuItemEx}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                        <Setter Property="Background" Value="{DynamicResource Theme.Brush.Default.Back}"/>
                                                        <Setter Property="HeaderTemplate" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplate}"/>
                                                        <Setter Property="HeaderTemplateSelector" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}"/>
                                                        <Setter Property="IconTemplate" Value="{Binding Path=Root.Manager.IconContentTemplate}"/>
                                                        <Setter Property="IconTemplateSelector" Value="{Binding Path=Root.Manager.IconContentTemplateSelector}"/>
                                                        <Setter Property="Command" Value="{Binding Path=., Converter={StaticResource ActivateCommandLayoutItemFromLayoutModelConverter}}"/>
                                                    </Style>
                                                </avalonDockControls:ContextMenuEx.ItemContainerStyle>-->
                                            </avalonDockControls:ContextMenuEx>
                                        </avalonDockControls:DropDownButton.DropDownContextMenu>
                                        <Image Source="{DynamicResource ellipsisDrawingImage}"/>

                                    </avalonDockControls:DropDownButton>

                                </Grid>
                                 <!--BorderThickness="{TemplateBinding BorderThickness}"-->
                                <Border x:Name="ContentPanel" 
                                        VerticalAlignment="Stretch" 
                                        HorizontalAlignment="Stretch"  
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="0"
                                        Background="{DynamicResource Theme.Brush.Default.Back}" 
                                        Grid.Column="0" 
                                        KeyboardNavigation.DirectionalNavigation="Contained" 
                                        Grid.Row="0"
                                        KeyboardNavigation.TabIndex="2" 
                                        KeyboardNavigation.TabNavigation="Cycle">
                                    <ContentPresenter x:Name="PART_SelectedContentHost" 
                                          ContentSource="SelectedContent" 
                                          Margin="{TemplateBinding Padding}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Model.ChildrenCount}" Value="0">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="MenuDropDownButton" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <!--<Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type TabItem}">
                            <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}"/>
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                            <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                        </Style>
                    </Setter.Value>
                </Setter>-->
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type TabItem}">
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                            <Setter Property="Background" Value="{DynamicResource Theme.Brush.Default.Back}"/>
                            <Setter Property="Foreground" Value="{DynamicResource Theme.Brush.Default.Fore}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource Theme.Brush.Control.Border}"/>
                            <!--<Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabUnselectedBackground}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabUnselectedText}}" />
                            <Setter Property="BorderBrush" Value="Transparent" />-->
                            <Setter Property="ToolTip" Value="{Binding ToolTip}" />
                            <Setter Property="Padding" Value="1,1" />
                            <Setter Property="Margin" Value="0" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type TabItem}">
                                        <Grid SnapsToDevicePixels="true"
                                              Margin="0 0 0 6">
                                            <Border x:Name="Shadow" Padding="2 0 2 2">
                                            </Border>
                                            <Border
										        x:Name="Bd"
										        Background="{TemplateBinding Background}"
										        BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource Self}}"
										        BorderThickness="1 0 1 1"
                                                SnapsToDevicePixels="True"
                                                CornerRadius="0 0 8 8">
                                                <Border.Effect>
                                                    <DropShadowEffect BlurRadius="16" ShadowDepth="0" Color="#000000" Opacity="{DynamicResource Theme.DropShadow.Opacity}"/>
                                                </Border.Effect>
                                            </Border>
                                            
                                            <ContentPresenter
										        x:Name="Content"
                                                Margin="0 0 0 0"
										        HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
										        VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
										        ContentSource="Header"
										        RecognizesAccessKey="True"
										        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="Selector.IsSelected" Value="true">
                                                <Setter Property="Panel.ZIndex" Value="1" />
                                            </Trigger>

                                            <!--  Document Well : Tab / Selected, active  -->
                                            <DataTrigger Binding="{Binding IsActive}" Value="True">
                                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedActiveBackground}}" />
                                                <Setter Property="Foreground" Value="{DynamicResource Theme.Brush.Default.Fore}" />
                                                <Setter Property="Panel.ZIndex" Value="1" />
                                                <Setter Property="FontWeight" Value="Bold" />
                                            </DataTrigger>

                                            <!--  Document Well : Tab / Selected, inactive  -->
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsActive}" Value="False" />
                                                    <Condition Binding="{Binding IsSelected}" Value="True" />
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedInactiveBackground}}" />
                                                <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabSelectedInactiveText}}" />
                                            </MultiDataTrigger>

                                            <!--  Document Well : Tab / Unselected  -->
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsActive}" Value="False" />
                                                    <Condition Binding="{Binding IsSelected}" Value="False" />
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="Bd" Property="BorderBrush" Value="Transparent" />
                                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabUnselectedBackground}}"/>
                                            </MultiDataTrigger>

                                            <!--  Document Well : Tab / Unselected, hovered  -->
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsMouseOver" Value="true" />
                                                    <Condition Property="Selector.IsSelected" Value="false" />
                                                </MultiTrigger.Conditions>
                                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabUnselectedHoveredBackground}}" />
                                                <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabUnselectedHoveredText}}" />
                                                <Setter Property="Panel.ZIndex" Value="0" />
                                            </MultiTrigger>

                                            <Trigger Property="IsEnabled" Value="false">
                                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <DataTemplate.Resources>
                                <SolidColorBrush x:Key="SelectedTabBrush" Color="Transparent"/>
                            </DataTemplate.Resources>
                            <Grid Margin="4 2 4 6">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <!--   Visibility="{Binding Content.IsQueryRunning, Converter={StaticResource BoolToNotHiddenConverter}}"-->
                                <ProgressBar 
                                    x:Name="spinner"
                                    Style="{StaticResource MaterialDesignCircularProgressBar}" 
                                    Grid.Column="0"
                                    IsIndeterminate="True"
                                    Width="16"
                                    Height="16"
                                    Foreground="{DynamicResource Theme.Brush.Accent}"
                                    Background="Transparent"
                                    Visibility="{Binding Content.IsQueryRunning, Converter={StaticResource BoolToVisibilityConverter}}"/>

                                <Border 
                                    x:Name="SelectedBd"
                                    Grid.Column="1"
                                    BorderThickness="0 0 0 3"
                                    Margin="4 0 4 0"
                                    BorderBrush="{DynamicResource SelectedTabBrush}"
                                    Opacity="1"
                                    >
                                    
                                </Border>
                                <!--<ui:ProgressBar
                                    x:Name="Progress"
                                    VerticalAlignment="Bottom"
                                    Foreground="{DynamicResource Theme.Brush.Alternate.Back}"
                                    Visibility="{Binding Content.IsQueryRunning, Converter={StaticResource BoolToVisibilityConverter}}"
                                    IsIndeterminate="{Binding Content.IsQueryRunning}"
                                    />-->
                                <avalonDockControls:LayoutDocumentTabItem Model="{Binding}" Grid.Column="1"/>

                            </Grid>
                            
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding Path=IsSelected}" Value="true">
                                    <Setter TargetName="SelectedBd" Property="BorderBrush" Value="{DynamicResource Theme.Brush.Accent}"/>
                                    <!--<Setter TargetName="Progress" Property="Foreground" Value="{DynamicResource Theme.Brush.Accent}"/>-->
                                </DataTrigger>
                                <!--<DataTrigger Binding="{Binding Content.IsQueryRunning}" Value="True">
                                    <Setter TargetName="SelectedBd" Property="BorderBrush" Value="{DynamicResource Theme.Brush.Accent}"/>
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard x:Name="pulse" >
                                            <Storyboard>
                                                <DoubleAnimation 
                                                    Storyboard.TargetName="SelectedBd"
                                                    Storyboard.TargetProperty="(Border.Opacity)" 
                                                    From="1" To="0.2" Duration="00:00:01" AutoReverse="True" RepeatBehavior="Forever" >
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                        
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <StopStoryboard BeginStoryboardName="pulse" />
                                    </DataTrigger.ExitActions>
                                </DataTrigger>-->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Content.IsQueryRunning}" Value="True"/>
                                        <Condition Binding="{Binding Path=IsSelected}" Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Foreground" TargetName="spinner" Value="{DynamicResource Theme.Brush.Control.Border}"/>
                                </MultiDataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <avalonDockControls:LayoutDocumentControl Model="{Binding}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
                            <avalonDockControls:DropDownControlArea
						DropDownContextMenu="{Binding Root.Manager.DocumentContextMenu}"
						DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
						Style="{DynamicResource DropDownControlArea}">
                        <Border
							x:Name="Header"
							Margin="0,0,0,2"
							Padding="1,0"
							Height="19"
							Background="{TemplateBinding Background}"
							BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.Background}}"
							BorderThickness="0,0,0,0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.ColumnSpan="2" Background="Transparent" />
                                <ContentPresenter
									Margin="4,0,4,1"
									VerticalAlignment="Bottom"
									Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
									ContentTemplate="{Binding DocumentHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalondock:DockingManager}, Mode=FindAncestor}}"
									ContentTemplateSelector="{Binding DocumentHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalondock:DockingManager}, Mode=FindAncestor}}"
									TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TabItem}}" />
                                        <!--  Close button should be moved out to the container style  -->
                                        <Button
									        x:Name="DocumentCloseButton"
									        Grid.Column="1"
									        Width="15"
                                            Height="15"
									        Margin="3,0"
									        HorizontalAlignment="Center"
									        VerticalAlignment="Bottom"
									        Command="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}"
									        Style="{StaticResource AvalonDockThemeVs2013ButtonStyle}"
									        ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
									        Visibility="Hidden">
                                            <Path
										        x:Name="PART_ImgPinClose"
										        Width="10"
										        Height="10"
										        Margin="1,0,0,1"
										        VerticalAlignment="Center"
										        Data="{DynamicResource PinClose}"
										        Fill="{DynamicResource Theme.Brush.Default.Fore}"
										        Stretch="Uniform" />
                                        </Button>
                                    </Grid>
                                </Border>
                            </avalonDockControls:DropDownControlArea>
                            <ControlTemplate.Triggers>
                                <!--  Close button visibility  -->
                                <DataTrigger Binding="{Binding Path=IsSelected}" Value="true">
                                    <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
                                </DataTrigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <DataTrigger Binding="{Binding Path=IsLastFocusedDocument}" Value="true">
                                    <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=IsActive}" Value="true">
                                    <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
                                </DataTrigger>
                                <!--BD: 17.08.2020 use HideCommand if CanClose=false but CanHide=true-->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=CanClose}" Value="false" />
                                        <Condition Binding="{Binding Path=CanHide}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="DocumentCloseButton" Property="Command" Value="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="DocumentCloseButton" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Anchorable_Hide}" />
                                </MultiDataTrigger>
                                <!--BD: 17.08.2020 hide button if both CanClose=false and CanHide=false-->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=CanClose}" Value="false" />
                                        <Condition Binding="{Binding Path=CanHide}" Value="false" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Collapsed" />
                                </MultiDataTrigger>

                                <!--  Document Well : Tab : Button / Selected, inactive  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsLastFocusedDocument}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="Header" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Header" Property="Padding" Value="0" />
                                    <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveGlyph}}" />
                                </MultiDataTrigger>

                                <!--  Document Well : Tab : Button / Selected, inactive, hovered  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsLastFocusedDocument}" Value="true" />
                                        <Condition Binding="{Binding IsMouseOver, ElementName=DocumentCloseButton}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="Header" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Header" Property="Padding" Value="0" />
                                    <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBackground}}" />
                                    <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBorder}}" />
                                    <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredGlyph}}" />
                                </MultiDataTrigger>

                                <!--  Document Well : Tab : Button / Selected, inactive, pressed  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsLastFocusedDocument}" Value="true" />
                                        <Condition Binding="{Binding IsMouseCaptured, ElementName=DocumentCloseButton}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="Header" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Header" Property="Padding" Value="0" />
                                    <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBackground}}" />
                                    <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBorder}}" />
                                    <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedGlyph}}" />
                                </MultiDataTrigger>

                                <!--  Document Well : Tab : Button / Selected, active  -->
                                <DataTrigger Binding="{Binding IsActive}" Value="true">
                                    <Setter TargetName="Header" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Header" Property="Padding" Value="0" />
                                    <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveGlyph}}" />
                                </DataTrigger>

                                <!--  Document Well : Tab : Button / Selected, active, hovered  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsActive}" Value="true" />
                                        <Condition Binding="{Binding IsMouseOver, ElementName=DocumentCloseButton}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="Header" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Header" Property="Padding" Value="0" />
                                    <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBackground}}" />
                                    <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredBorder}}" />
                                    <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveHoveredGlyph}}" />
                                </MultiDataTrigger>

                                <!--  Document Well : Tab : Button / Selected, active, pressed  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsActive}" Value="true" />
                                        <Condition Binding="{Binding IsMouseCaptured, ElementName=DocumentCloseButton}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="Header" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Header" Property="Padding" Value="0" />
                                    <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBackground}}" />
                                    <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedBorder}}" />
                                    <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActivePressedGlyph}}" />
                                </MultiDataTrigger>

                                <!--  Document Well : Tab : Button / Unselected, tab hovered  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsActive}" Value="False" />
                                        <Condition Binding="{Binding IsLastFocusedDocument}" Value="False" />
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredGlyph}}" />
                                </MultiDataTrigger>

                                <!--  Document Well : Tab : Button / Unselected, tab hovered, button hovered  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsActive}" Value="False" />
                                        <Condition Binding="{Binding IsLastFocusedDocument}" Value="False" />
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                        <Condition Binding="{Binding IsMouseOver, ElementName=DocumentCloseButton}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredButtonHoveredBackground}}" />
                                    <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredButtonHoveredBorder}}" />
                                    <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredButtonHoveredGlyph}}" />
                                </MultiDataTrigger>

                                <!--  Document Well : Tab : Button / Unselected, tab hovered, button pressed  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsActive}" Value="False" />
                                        <Condition Binding="{Binding IsLastFocusedDocument}" Value="False" />
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                        <Condition Binding="{Binding IsMouseCaptured, ElementName=DocumentCloseButton}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredButtonPressedBackground}}" />
                                    <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredButtonPressedBorder}}" />
                                    <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonUnselectedTabHoveredButtonPressedGlyph}}" />
                                </MultiDataTrigger>

                                <!--  Mulitple Document Well : Tab : Button / Selected, tab hovered, button pressed  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsActive}" Value="False" />
                                        <Condition Binding="{Binding Path=IsSelected}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="Header" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Header" Property="Padding" Value="0" />
                                    <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedActiveGlyph}}" />
                                </MultiDataTrigger>

                                <!--  Mulitple Document Well : Tab : Button / Selected, inactive, hovered  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsActive}" Value="False" />
                                        <Condition Binding="{Binding Path=IsSelected}" Value="True" />
                                        <Condition Binding="{Binding IsMouseOver, ElementName=DocumentCloseButton}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="Header" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Header" Property="Padding" Value="0" />
                                    <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBackground}}" />
                                    <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredBorder}}" />
                                    <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactiveHoveredGlyph}}" />
                                </MultiDataTrigger>

                                <!--  Mulitple Document Well : Tab : Button / Selected, inactive, pressed  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsActive}" Value="False" />
                                        <Condition Binding="{Binding Path=IsSelected}" Value="True" />
                                        <Condition Binding="{Binding IsMouseCaptured, ElementName=DocumentCloseButton}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="Header" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Header" Property="Padding" Value="0" />
                                    <Setter TargetName="DocumentCloseButton" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBackground}}" />
                                    <Setter TargetName="DocumentCloseButton" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedBorder}}" />
                                    <Setter TargetName="PART_ImgPinClose" Property="Fill" Value="{DynamicResource {x:Static reskeys:ResourceKeys.DocumentWellTabButtonSelectedInactivePressedGlyph}}" />
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ResourceDictionary.MergedDictionaries>
                <res:DesignTimeResourceDictionary DesignTimeSource="pack://application:,,,/Fluent;component/Themes/Generic.xaml"/>
                <res:DesignTimeResourceDictionary DesignTimeSource="pack://application:,,,/DaxStudio.UI;component/Theme/Light.DaxStudio.Theme.xaml"/>
                <ResourceDictionary  Source="pack://application:,,,/DaxStudio.UI;Component/Resources/Styles/AvalonDock.NavigatorWindow.xaml" />
                <ResourceDictionary  Source="pack://application:,,,/DaxStudio.UI;Component/Resources/DaxStudioResources.xaml" />
                <ResourceDictionary Source="pack://application:,,,/DaxStudio.UI;Component/Resources/Styles/ModernWpf.Medium.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/DaxStudio.UI;Component/Resources/Styles/DaxStudio.Spinner.xaml"/>
                <!--<ResourceDictionary Source="Styles/AvalonDock.NavigatorWindow.xaml"/>-->
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        
        <avalondock:DockingManager 
            x:Name="Items"
            Background="{DynamicResource Theme.Brush.MenuBar.Back}"
            DocumentPaneControlStyle="{StaticResource MyCustomDocumentPaneControlStyle}"
            DocumentsSource="{Binding Items}"
            ActiveContent="{Binding ActiveItem, Mode=TwoWay}"
            IsVirtualizingDocument="False"
            cal:Message.Attach="[Event DocumentClosing] = [Action TabClosing($view,$eventArgs)]"
            Margin="-6"
            Tag="{Binding .}"
            >

            <avalondock:DockingManager.DocumentContextMenu>
                <ContextMenu 
                    cal:Action.Target="{Binding Source={StaticResource Proxy}, Path=Value}">
                    <MenuItem
			Command="{Binding Path=CloseCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_Close}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
                    <MenuItem Command="{Binding Path=CloseAllButThisCommand}" Header="{x:Static avalonDockProperties:Resources.Document_CloseAllButThis}" />
                    <MenuItem Command="{Binding Path=CloseAllCommand}" Header="{x:Static avalonDockProperties:Resources.Document_CloseAll}" />
                    <MenuItem Command="{Binding Path=FloatCommand}" Header="{x:Static avalonDockProperties:Resources.Document_Float}" />
                    <MenuItem Command="{Binding Path=DockAsDocumentCommand}" Header="{x:Static avalonDockProperties:Resources.Document_DockAsDocument}" />
                    <MenuItem Header="Duplicate" cal:Message.Attach="DuplicateTab($dataContext)" />
                    <MenuItem
			Command="{Binding Path=NewHorizontalTabGroupCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_NewHorizontalTabGroup}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                        <MenuItem.Icon>
                            <Path
					Width="14"
					Height="14"
					VerticalAlignment="Center"
					Data="{DynamicResource HTabGroup}"
					Fill="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactiveGlyph}}"
					Stretch="Uniform" />
                        </MenuItem.Icon>
                    </MenuItem>

                    <MenuItem
			Command="{Binding Path=NewVerticalTabGroupCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_NewVerticalTabGroup}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
                        <MenuItem.Icon>
                            <Path
					Width="14"
					Height="14"
					VerticalAlignment="Center"
					Data="{DynamicResource VTabGroup}"
					Fill="{DynamicResource {x:Static reskeys:ResourceKeys.ToolWindowCaptionButtonInactiveGlyph}}"
					Stretch="Uniform" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem
			Command="{Binding Path=MoveToNextTabGroupCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_MoveToNextTabGroup}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
                    <MenuItem
			Command="{Binding Path=MoveToPreviousTabGroupCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_MoveToPreviousTabGroup}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
                </ContextMenu>
            </avalondock:DockingManager.DocumentContextMenu>
            <avalondock:DockingManager.LayoutItemTemplateSelector>
                <selectors:AvalonDockTemplateSelector>
                    <selectors:AvalonDockTemplateSelector.DocumentViewTemplate>
                        <DataTemplate>
                            <views:DocumentView  cal:View.Model="{Binding . }"/>
                        </DataTemplate>
                    </selectors:AvalonDockTemplateSelector.DocumentViewTemplate>
                </selectors:AvalonDockTemplateSelector>
            </avalondock:DockingManager.LayoutItemTemplateSelector>

            <avalondock:DockingManager.Theme>
                <avalondock:DaxStudioGenericTheme />
            </avalondock:DockingManager.Theme>

            <!-- Note the Binding to "Content". This is how AvalonDock holds the model -->
            <!-- Header Template used for both solutions. Note that AvalonDock has default Templates itself -->
            <!--<avalondock:DockingManager.AnchorableHeaderTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="AAA"></TextBlock>
                        <TextBlock Text="{Binding Path=Content.Title}"></TextBlock>
                    </StackPanel>
                </DataTemplate>
                    
            </avalondock:DockingManager.AnchorableHeaderTemplate>
            <avalondock:DockingManager.AnchorableTitleTemplate>
                <ItemContainerTemplate>
                    <Border>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="AAA"/>
                            <TextBlock Text="{Binding Content.Title}"/>
                        </StackPanel>
                    </Border>
                </ItemContainerTemplate>
            </avalondock:DockingManager.AnchorableTitleTemplate>-->
            
            <avalondock:DockingManager.DocumentHeaderTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <!--<TextBlock Text="4" FontFamily="Webdings" Width="10" Padding="0,0,0,0"
                                   Visibility="{Binding Converter={StaticResource BoolToHiddenConverter},Path=Content.IsQueryRunning}"
                                   Foreground="{DynamicResource Theme.Brush.Default.Fore}"/>-->

                        <TextBlock Text="{Binding Content.DisplayName}" 
                                   ToolTip="{Binding Content.FileName}" 
                                   Foreground="{DynamicResource Theme.Brush.Default.Fore}"/>
                        <TextBlock Text="*" 
                                   Visibility="{Binding Content.IsDirty, Converter={StaticResource BoolToVisibilityConverter}}" 
                                   Foreground="{DynamicResource Theme.Brush.Default.Fore}"/>

                    </StackPanel>
                </DataTemplate>
            </avalondock:DockingManager.DocumentHeaderTemplate>
            
            <avalondock:DockingManager.DocumentPaneMenuItemHeaderTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Content.DisplayName}" Foreground="{DynamicResource Theme.Brush.Default.Fore}" />
                        <TextBlock Text="*" Visibility="{Binding Content.IsDirty, Converter={StaticResource BoolToVisibilityConverter}}"  Foreground="{DynamicResource Theme.Brush.Default.Fore}"/>
                    </StackPanel>
                </DataTemplate>
            </avalondock:DockingManager.DocumentPaneMenuItemHeaderTemplate>
            <!-- This can be commented out in the Convention approach, as the Convention Manager has one incorporated -->
            <!--
            <avalondock:DockingManager.DocumentTemplate>
                <DataTemplate>
                    <ContentControl cal:View.Model="{Binding}" 
                                    VerticalContentAlignment="Stretch" 
                                    HorizontalContentAlignment="Stretch" 
                                    IsTabStop="False"/>
                </DataTemplate>
            </avalondock:DockingManager.DocumentTemplate>
            -->

            <avalondock:DockingManager.LayoutItemContainerStyleSelector>
                <utils:PanesStyleSelector>
                    <utils:PanesStyleSelector.DocumentStyle>
                        <!--Define Style of a Document View-->
                        <Style TargetType="{x:Type avalonDockControls:LayoutItem}">
                            <Setter Property="Title" Value="{Binding Model.DisplayName, UpdateSourceTrigger=PropertyChanged}"/>
                            <Setter Property="ToolTip" Value="{Binding Model.FilePath}"/>
                            <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}"/>
                            <Setter Property="IconSource" Value="{Binding Model.IconSource}"/>
                            <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>

                        </Style>
                    </utils:PanesStyleSelector.DocumentStyle>
                </utils:PanesStyleSelector>
            </avalondock:DockingManager.LayoutItemContainerStyleSelector>

            <avalondock:DockingManager.Resources>
                <ResourceDictionary>
                    
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="pack://application:,,,/DaxStudio.UI;Component/Resources/Styles/AvalonDock.NavigatorWindow.xaml"/>
                    </ResourceDictionary.MergedDictionaries>
                </ResourceDictionary>
                
            </avalondock:DockingManager.Resources>
            
        </avalondock:DockingManager>
    </Grid>
</UserControl>
