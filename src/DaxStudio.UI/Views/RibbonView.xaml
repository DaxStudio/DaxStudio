<UserControl x:Class="DaxStudio.UI.Views.RibbonView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:cal="clr-namespace:Caliburn.Micro;assembly=Caliburn.Micro.Platform"
             xmlns:local="clr-namespace:DaxStudio.UI.Resources" 
             xmlns:conv="clr-namespace:DaxStudio.UI.Converters"
             xmlns:ap="clr-namespace:DaxStudio.UI.AttachedProperties"
             d:DesignWidth="980"
            
             mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <local:DesignTimeResourceDictionary DesignTimeSource="pack://application:,,,/Fluent;component/Themes/Generic.xaml"/>
                <local:DesignTimeResourceDictionary DesignTimeSource="pack://application:,,,/DaxStudio.UI;component/Theme/Light.DaxStudio.Theme.xaml"/>
                <ResourceDictionary  Source="pack://application:,,,/DaxStudio.UI;Component/Resources/DaxStudioResources.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/DaxStudio.UI;Component/Resources/Styles/ListViewStyle.xaml" />
                <ResourceDictionary Source="pack://application:,,,/DaxStudio.UI;Component/Resources/Styles/FluentRibbon/GalleryItem.xaml" />
                <ResourceDictionary Source="pack://application:,,,/DaxStudio.UI;Component/Resources/Styles/FluentRibbon/DropDownButton.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <conv:BoolToCollapsedConverter x:Key="BoolToVisibilityConverter"/>
        
            <DataTemplate x:Key="ResultsTargetTemplate">
            <Border 
                BorderThickness="4"
                BorderBrush="Transparent">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                <Image VerticalAlignment="Center"
                        Grid.Column="0"
                        ap:ImageBindingHelper.SourceResourceKey="{Binding ImageResource}"
                        Margin="6 0 8 0"
                        Height="20"
                        Width="20"/>
                    <TextBlock Text="{Binding Name}"
                            Grid.Column="1"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                </Grid>
                <Border.ToolTip>
                    <Fluent:ScreenTip Text="{Binding Tooltip}" Title="{Binding Name}"/>
                </Border.ToolTip>
            </Border>
        </DataTemplate>

            
            <DataTemplate x:Key="RunStyleTemplate" >
                <!--<Button Click="RunStyles_Click" >
                    <Button.Template>
                        <ControlTemplate>
                HorizontalAlignment="Left"
                -->
                <Border
                BorderThickness="4"
                BorderBrush="Transparent" 
                IsEnabled="{Binding IsEnabled}"                               
                >
                    <Grid Margin="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Image  Grid.Column="0" 
                            ap:ImageBindingHelper.SourceResourceKey="{Binding ImageResource}"
                            Stretch="UniformToFill" 
                                Margin="6 0 0 0 "
                            Width="20" Height="20" />
                        <TextBlock Grid.Column="1" Text="{Binding Name}"
                            TextWrapping="Wrap"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" 
                            TextAlignment="Left"
                        />

                    </Grid>
                    <Border.ToolTip>
                        <Fluent:ScreenTip Text="{Binding Tooltip}" Title="{Binding Name}"/>
                    </Border.ToolTip>
                </Border>
                        <!--</ControlTemplate>
                    </Button.Template>
                </Button>-->
            </DataTemplate>

            <!--<ControlTemplate x:Key="Fluent.Ribbon.Templates.ResizeableContentControl"
                     TargetType="{x:Type Fluent:ResizeableContentControl}">
                <Border x:Name="PART_DropDownBorder"
                        CornerRadius="8"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"
                BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}"
                BorderThickness="1"
                SnapsToDevicePixels="True">

                    <Grid Margin="1"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Stretch">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <ContentPresenter />

                        <Border x:Name="resizeBorder"
                        Grid.Row="1"
                        Height="11"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}"
                        BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}"
                        BorderThickness="0 1 0 0">
                            <Grid>
                                <Thumb x:Name="PART_ResizeVerticalThumb"
                               Width="Auto"
                               Height="10"
                               Margin="0 0 0 -90"
                               HorizontalAlignment="Stretch"
                               VerticalAlignment="Top"
                               Cursor="SizeNS"
                               Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                <Thumb x:Name="PART_ResizeBothThumb"
                               Width="10"
                               Height="10"
                               Margin="0 0 0 -90"
                               HorizontalAlignment="Right"
                               VerticalAlignment="Top"
                               Cursor="SizeNWSE"
                               Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                            </Grid>
                        </Border>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="ResizeMode" Value="None">
                        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="ResizeMode" Value="Both">
                        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
                        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="ResizeMode" Value="Vertical">
                        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
                        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>-->

            <ControlTemplate x:Key="RibbonDropDownButtonControlTemplate"
                     TargetType="{x:Type Fluent:DropDownButton}">
                <!--<ControlTemplate.Resources>
                    <Style BasedOn="{StaticResource MenuSeparatorStyle}"
                   TargetType="{x:Type Separator}" />
                </ControlTemplate.Resources>-->
                <Grid>
                    <Border x:Name="PART_ButtonBorder"
                    Height="Auto"
                    HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalAlignment}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                        <StackPanel x:Name="stackPanel"
                            Width="Auto"
                            Margin="{TemplateBinding Padding}"
                            Orientation="Vertical">
                            <Fluent:IconPresenter x:Name="iconImage"
                                          Margin="0 2 0 0"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                          LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}"
                                          MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}"
                                          SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Fluent:TwoLineLabel x:Name="controlLabel"
                                         Margin="2 0 2 2"
                                         HorizontalAlignment="Stretch"
                                         VerticalAlignment="Center"
                                         HasGlyph="{TemplateBinding HasTriangle}"
                                         Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>
                    </Border>
                    <Popup x:Name="PART_Popup"
                   Grid.ColumnSpan="2"
                   Margin="0 0 -4 0"
                           
                   VerticalAlignment="Top"
                   AllowsTransparency="True"
                   IsOpen="{TemplateBinding IsDropDownOpen}"
                   Placement="Bottom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                        <Grid Name="DropDown"
                      Margin="0"
                      VerticalAlignment="Top"
                      SnapsToDevicePixels="True">
                            <Border x:Name="PART_DropDownBorder"
                            MinWidth="{TemplateBinding ActualWidth}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Top"
                            Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"
                            BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}"
                            CornerRadius="8"
                                    Margin="4"
                            BorderThickness="1"
                            SnapsToDevicePixels="True">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="8" ShadowDepth="0" Opacity="{DynamicResource Theme.DropShadow.Opacity}"/>
                                </Border.Effect>
                                <Grid Width="Auto"
                              Height="Auto"
                              HorizontalAlignment="Stretch"
                              VerticalAlignment="Top">
                                    <!--<Border Width="Auto"
                                    Height="Auto"
                                    VerticalAlignment="Top"
                                    BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"
                                    BorderThickness="1" />-->
                                    <Grid Margin="1"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Top">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <ScrollViewer x:Name="PART_ScrollViewer"
                                              Margin="1"
                                              HorizontalScrollBarVisibility="Hidden"
                                              IsTabStop="False"
                                              SnapsToDevicePixels="True"
                                              Style="{DynamicResource MenuScrollViewer}"
                                              VerticalScrollBarVisibility="Auto">
                                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Local" />
                                        </ScrollViewer>
                                        <Border x:Name="resizeBorder"
                                        Grid.Row="1"
                                        Height="11"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Top"
                                        Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}"
                                        BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}"
                                        BorderThickness="0 1 0 0">
                                            <Grid>
                                                <Thumb x:Name="PART_ResizeVerticalThumb"
                                               Width="Auto"
                                               Height="10"
                                               Margin="0 0 0 -90"
                                               HorizontalAlignment="Stretch"
                                               VerticalAlignment="Top"
                                               Cursor="SizeNS"
                                               Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                <Thumb x:Name="PART_ResizeBothThumb"
                                               Width="10"
                                               Height="10"
                                               Margin="0 0 0 -90"
                                               HorizontalAlignment="Right"
                                               VerticalAlignment="Top"
                                               Cursor="SizeNWSE"
                                               Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                            </Grid>
                                        </Border>
                                    </Grid>
                                </Grid>
                            </Border>
                        </Grid>
                    </Popup>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="ResizeMode" Value="None">
                        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="ResizeMode" Value="Both">
                        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
                        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="ResizeMode" Value="Vertical">
                        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
                        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="Size" Value="Small">
                        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
                        <Setter TargetName="controlLabel" Property="Margin" Value="-2 0 2 1" />
                        <Setter TargetName="controlLabel" Property="Text" Value="" />
                        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
                        <Setter TargetName="controlLabel" Property="Width" Value="10" />
                        <Setter TargetName="iconImage" Property="Margin" Value="2 0 0 0" />
                        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
                    </Trigger>
                    <Trigger Property="Size" Value="Middle">
                        <Setter TargetName="PART_ButtonBorder" Property="VerticalAlignment" Value="Stretch" />
                        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
                        <Setter TargetName="controlLabel" Property="Margin" Value="2 0 2 1" />
                        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
                        <Setter TargetName="iconImage" Property="Margin" Value="2 0 2 0" />
                        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
                        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
                        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
                    </Trigger>

                    <Trigger Property="IsDropDownOpen" Value="True">
                        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True" />
                            <Condition Property="IsDropDownOpen" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>


            <ControlTemplate x:Key="RibbonSplitButtonControlTemplate" TargetType="{x:Type Fluent:SplitButton}">
                <!--<ControlTemplate.Resources>
                    <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
                </ControlTemplate.Resources>-->
                <Grid>
                    <Border Name="PART_ButtonBorder" VerticalAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
                        <StackPanel Name="stackPanel" KeyboardNavigation.TabNavigation="Local" Orientation="Vertical">
                            <Fluent:ToggleButton x:Name="PART_Button" Width="Auto" Height="Auto" Margin="0 0 0 0" CanAddToQuickAccessToolBar="{TemplateBinding CanAddButtonToQuickAccessToolBar}" 
                                                 Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" 
                                                 CommandTarget="{TemplateBinding CommandTarget}" 
                                                 GroupName="{Binding GroupName, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                                 Header="{TemplateBinding Header}" 
                                                 Icon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" 
                                                 IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                                 IsDefinitive="{TemplateBinding IsDefinitive}" 
                                                 IsEnabled="{Binding IsButtonEnabled, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" 
                                                 Size="{TemplateBinding Size}" 
                                                 Style="{DynamicResource InnerButtonStyle}" 
                                                 ToolTip="{TemplateBinding ToolTip}" />
                            <Border Name="downBorder" Margin="0" Background="Transparent" BorderBrush="Transparent" BorderThickness="0">
                                <Grid>
                                    <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2 1 2 2" HorizontalAlignment="Center" VerticalAlignment="Center" HasGlyph="{TemplateBinding HasTriangle}" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Grid>
                            </Border>
                        </StackPanel>
                    </Border>
                    <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0 0 -4 0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" IsEnabled="{TemplateBinding IsEnabled}" SnapsToDevicePixels="True">
                            <Border Background="Transparent" Padding="8 2 8 8">
                            <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True" CornerRadius="8">
                                <Border.Effect>
                                        <DropShadowEffect BlurRadius="8" ShadowDepth="0" Opacity="{DynamicResource Theme.DropShadow.Opacity}"/>
                                </Border.Effect>
                                <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                        <!--<Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />-->
                                        <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <ScrollViewer x:Name="PART_ScrollViewer" MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="1" HorizontalScrollBarVisibility="Hidden" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}" VerticalScrollBarVisibility="Auto">
                                            <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Vertical" />
                                        </ScrollViewer>
                                        <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0 1 0 0">
                                            <Grid>
                                                <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0 0 0 -90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                            </Grid>
                                        </Border>
                                    </Grid>
                                </Grid>
                            </Border>
                            </Border>
                        </Grid>
                    </Popup>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="ResizeMode" Value="None">
                        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="ResizeMode" Value="Both">
                        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
                        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="ResizeMode" Value="Vertical">
                        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
                        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                    </Trigger>
                    <Trigger Property="Size" Value="Small">
                        <Setter TargetName="controlLabel" Property="Margin" Value="0 -19 0 0" />
                        <Setter TargetName="controlLabel" Property="Text" Value="" />
                        <Setter TargetName="controlLabel" Property="Width" Value="10" />
                        <Setter TargetName="downBorder" Property="Padding" Value="1 0 0 0" />
                        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
                    </Trigger>
                    <Trigger Property="Size" Value="Middle">
                        <Setter TargetName="controlLabel" Property="Margin" Value="0 -19 0 0" />
                        <Setter TargetName="controlLabel" Property="Text" Value="" />
                        <Setter TargetName="controlLabel" Property="Width" Value="10" />
                        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
                    </Trigger>
                    <Trigger Property="IsButtonEnabled" Value="False">
                        <Setter TargetName="PART_Button" Property="IsEnabled" Value="False" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="PART_Button" Property="IsEnabled" Value="False" />
                        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
                    </Trigger>
                    <Trigger Property="IsDropDownOpen" Value="True">
                        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition SourceName="PART_Button" Property="IsMouseOver" Value="True" />
                            <Condition Property="IsDropDownOpen" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition SourceName="downBorder" Property="IsMouseOver" Value="True" />
                            <Condition Property="IsDropDownOpen" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                        <Setter TargetName="downBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                        <Setter TargetName="downBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- Menu Item Template -->
            <ControlTemplate x:Key="MenuItemTemplate"
                     TargetType="{x:Type MenuItem}">
                <Grid Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="25" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!--  -->
                    <Border x:Name="border"
                        Grid.Column="0"
                        Grid.ColumnSpan="3"
                        Width="Auto"
                        Margin="0"
                        HorizontalAlignment="Stretch"
                        Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}"
                        BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}"
                        BorderThickness="1"
                        Visibility="Collapsed" />
                    <ContentPresenter x:Name="textBlock"
                              Grid.Column="1"
                              Width="Auto"
                              Height="Auto"
                              Margin="5 3 3 3"
                              VerticalAlignment="Center"
                              ContentSource="Header"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              RecognizesAccessKey="{Binding Path=(Fluent:MenuItem.RecognizesAccessKey), RelativeSource={RelativeSource TemplatedParent}}"
                              d:LayoutOverrides="Width" />
                    <Border x:Name="iconImageBorder"
                    BorderThickness="1">
                        <!--<Fluent:IconPresenter x:Name="iconImage"
                                      Margin="3 2 2 2"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                      SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />-->
                    </Border>
                    <Image x:Name="checkedImage"
                       Width="16"
                       Height="16"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       SnapsToDevicePixels="True"
                       Source="{DynamicResource Fluent.Ribbon.Images.Checked}"
                       Stretch="Uniform"
                       Visibility="Collapsed" />
                    <TextBlock x:Name="gestureTextBlock"
                       Grid.Column="2"
                       Width="Auto"
                       Height="Auto"
                       Margin="3 3 15 3"
                       VerticalAlignment="Center"
                       Text="{TemplateBinding InputGestureText}" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="InputGestureText" Value="{x:Null}">
                        <Setter TargetName="gestureTextBlock" Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="InputGestureText" Value="">
                        <Setter TargetName="gestureTextBlock" Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter TargetName="iconImageBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
                        <Setter TargetName="iconImageBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.BorderBrush}" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="Icon" Value="{x:Null}" />
                            <Condition Property="IsChecked" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="checkedImage" Property="Visibility" Value="Visible" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsHighlighted" Value="True" />
                            <Condition Property="IsEnabled" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="border" Property="Visibility" Value="Visible" />
                    </MultiTrigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="checkedImage" Property="Effect">
                            <Setter.Value>
                                <Fluent:GrayscaleEffect />
                            </Setter.Value>
                        </Setter>
                        <Setter TargetName="checkedImage" Property="Opacity" Value="0.5" />
                        <Setter TargetName="gestureTextBlock" Property="Opacity" Value="0.5" />
                        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            
        </ResourceDictionary>
    </UserControl.Resources>

    <!--
               CanCustomizeQuickAccessToolBar="True" 
                   CanCustomizeQuickAccessToolBarItems="True"
    -->
    <Fluent:Ribbon Height="Auto" 
                   AutomaticStateManagement="True"
                   CanCustomizeQuickAccessToolBar="False"
                   CanCustomizeQuickAccessToolBarItems="False"
                   IsQuickAccessToolBarMenuDropDownVisible="False"
                   IsKeyTipHandlingEnabled="True"
                   CanMinimize="True"
                   CanUseSimplified="True"
         >    
        <Fluent:Ribbon.Resources>

            <DataTemplate x:Key="TraceWatcherTemplate">
                <!-- Icon="{Binding Title, Converter={StaticResource TraceIcons}}"
                                     LargeIcon="{Binding Title, Converter={StaticResource TraceIconsLarger}}" -->
                <Fluent:ToggleButton Header="{Binding Title}" 
                                     IsChecked="{Binding IsChecked, Mode=TwoWay}" 
                                     ap:FluentRibbonAttachedProperties.KeyTip="{Binding KeyTip}"
                                     SizeDefinition="{Binding SizeDefinition}" 
                                     ClickMode="Press" Width="Auto" 
                                     ap:ImageBindingHelper.ToggleIconResourceKey="{Binding ImageResource}"
                                     
                                     IsEnabled="{Binding IsEnabled}"
                                     >
                    <Fluent:ToggleButton.ToolTip>
                        <Fluent:ScreenTip Title="{Binding Title}" Text="{Binding ToolTipText}" DisableReason="{Binding DisableReason}" />
                    </Fluent:ToggleButton.ToolTip>
                </Fluent:ToggleButton>               
                
            </DataTemplate>

            <!--<Style x:Key="TabButton" TargetType="Fluent:Button">
                <Setter Property="Foreground" Value="White"></Setter>
            </Style>-->
            
        </Fluent:Ribbon.Resources>


        <!--Quick Access Toolbar Items-->
        <Fluent:Ribbon.QuickAccessItems >
            <!--You Can Just Bind with Any Control-->
            
            <!--<Fluent:QuickAccessMenuItem Target="{Binding ElementName=NewQueryQat}" IsChecked="True"/>
            <Fluent:QuickAccessMenuItem Target="{Binding ElementName=NewConnectedQueryQat}" IsChecked="True"/>
            <Fluent:QuickAccessMenuItem Target="{Binding ElementName=SaveQat}" IsChecked="True"/>-->
            
            <!-- 
            Note these QuickAccess Buttons use code behind event handlers 
            As the event bindings did not seem to work reliably until an Target element
            Had been drawn so using the elements from the backstage menu did not work all the time
            -->
            <Fluent:QuickAccessMenuItem IsChecked="True">
                <Fluent:Button Header="New" Icon="{DynamicResource file_newDrawingImage}" 
                               Name="qatNew" 
                               Click="NewQuery_Click" 
                               ToolTip="Open a new query window" />
            </Fluent:QuickAccessMenuItem>

            <Fluent:QuickAccessMenuItem IsChecked="True">
                <Fluent:Button Header="New (Existing Connection)" Icon="{DynamicResource file_new_linkedDrawingImage}" 
                               Name="qatNewConnected" 
                               Click="NewConnectedQuery_Click" 
                               ToolTip="Open a new query window using the current connection"
                               IsEnabled="{Binding CanNewQueryWithCurrentConnection}" />
            </Fluent:QuickAccessMenuItem>

            <Fluent:QuickAccessMenuItem IsChecked="True">
                <Fluent:Button Header="Save" 
                               Icon="{DynamicResource save_toolbarDrawingImage}" 
                               Name="qatSave" 
                               Click="Save_Click" 
                               ToolTip="Save the current query window"
                               IsEnabled="{Binding CanSave}" />
            </Fluent:QuickAccessMenuItem>

            <Fluent:QuickAccessMenuItem IsChecked="True">
                <Fluent:Button  IsEnabled="False"/>
            </Fluent:QuickAccessMenuItem>

            <Fluent:QuickAccessMenuItem IsChecked="True">
                <Fluent:Button Header="Change Theme" 
                               ap:ImageBindingHelper.ButtonIconResourceKey="{Binding Path=ThemeImageResource}" 
                               Name="qatChangeTheme" 
                               Click="ChangeTheme_Click" 
                               ToolTip="Change the application theme"
                                />
            </Fluent:QuickAccessMenuItem>

        </Fluent:Ribbon.QuickAccessItems>

        <!--Backstage-->
            
        <Fluent:Ribbon.Menu>
            <Grid>
                <Fluent:Backstage x:Name="Backstage">
                    
                    <Fluent:BackstageTabControl Background="{DynamicResource Theme.Brush.MenuBar.Back}">

                            <!-- File New -->
                        <Fluent:Button Header="New" 
                                   Name="btnNewQuery" 
                                   HorizontalContentAlignment="Left" 
                                   Foreground="{DynamicResource Fluent.Ribbon.Brushes.Backstage.BackButton.Foreground}"
                                   Height="30"
                                   ToolTip="Open a New Query"
                                   DockPanel.Dock="Top"
                                   cal:Message.Attach="[Event Click] = [Action NewQuery]">
                        </Fluent:Button>

                        <Fluent:Button
                            Name="btnNewQueryConnected"
                            Header="New (Copy Connection)"
                            ToolTip="Open a New Query with the current connection"
                            Foreground="{DynamicResource Fluent.Ribbon.Brushes.Backstage.BackButton.Foreground}"
                            Height="30"
                            cal:Message.Attach="[Event Click] = [Action NewQueryWithCurrentConnection]">

                        </Fluent:Button>

                        <Fluent:BackstageTabItem 
                        Header="Open" 
                        Height="30"
                            Background="{DynamicResource Theme.Brush.MenuBar.Back}"
                            >

                            <!-- Right-side content here -->
                            <Grid Margin="35,0,0,0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Text="Open" FontSize="22" 
                                       Foreground="{DynamicResource Theme.Brush.Default.Fore}"
                                       Margin="0,0,0,16"
                                       />


                                    <!-- style comes from ribbon control -->
                                <Button Grid.Row="1"
                                        Content="Browse"
                                        Margin="0 0 0 16"
                                        Style="{DynamicResource AccentButtonStyle }"
                                        cal:Message.Attach="[Click] = [Action Open($view)]"/>

                                <Label FontSize="14" Foreground="{DynamicResource Theme.Brush.Default.Fore}" 
                                       FontWeight="DemiBold"
                                       SnapsToDevicePixels="True"
                                       Margin="0 0 0 8"
                                       Grid.Row="2" >Recent Documents</Label>

                                        <ListView x:Name="RecentFiles" 
                                                  Style="{StaticResource DaxStudioListViewNoSelectionStyle}"
                                                  DataContext="{Binding}" 
                                                  ItemsSource="{Binding Path=RecentFiles}" 
                                                  Margin="0 0 0 0" 
                                                  Padding="0 0 25 0"
                                                  MinWidth="400"
                                                  MaxWidth="600"
                                                  HorizontalAlignment="Left"
                                                  BorderBrush="Transparent" 
                                                  
                                                  Grid.Row="3"
                                                  HorizontalContentAlignment="Stretch"
                                                  cal:Message.Attach="[Event MouseLeftButtonUp] = [Action OpenRecentFile(RecentFiles.SelectedItem, $view)]"
                                                  >
                                            <!-- cal:Message.Attach="[Event MouseLeftButtonUp] = [Action OpenRecentFile(RecentFiles.SelectedItem, {Binding ElementName=Backstage})]"  -->
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="MouseLeftButtonUp" >
                                                    <cal:Action.TargetWithoutContext>

                                                        <cal:ActionMessage MethodName="OpenRecentFile">
                                                            <cal:Parameter Value="{Binding ElementName=RecentFiles, Path=SelectedItem}"/>
                                                            <cal:Parameter Value="{Binding ElementName=Backstage}"/>
                                                        </cal:ActionMessage>
                                                    </cal:Action.TargetWithoutContext>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>

                                            <ListView.ItemTemplate>
                                                <DataTemplate>
                                                <Border x:Name="lvBorder" 
                                                        Background="Transparent"
                                                        BorderBrush="{DynamicResource Theme.Brush.Control.Border}"
                                                        
                                                        Padding="8"
                                                        >
                                                        <StackPanel Orientation="Horizontal">
                                                            <Grid>
                                                                <!--<Image Source="{Binding Path=Icon,Converter={StaticResource FileIcons}}"
                                                       Margin="0,3,10,3" Width="32" Height="32" />-->
                                                        <Image  Margin="0,3,10,3" ap:ImageBindingHelper.SourceResourceKey="{Binding ImageResource}" Width="32"/>
                                                        <TextBlock Text="{Binding ExtensionLabel}" Foreground="{DynamicResource Theme.Brush.Default.Fore}" FontSize="10" FontWeight="Bold" Margin="6,14,0,0"></TextBlock>
                                                            </Grid>
                                                            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                                                                <TextBlock Text="{Binding FileAndExtension}" FontSize="14" />
                                                                <TextBlock Text="{Binding Folder}" TextTrimming="CharacterEllipsis" FontSize="12" Foreground="{DynamicResource Theme.Brush.Muted.Fore}"></TextBlock>
                                                            </StackPanel>
                                                        </StackPanel>
                                                        <i:Interaction.Triggers>
                                                            <i:EventTrigger EventName="Click" >
                                                                <cal:Action.Target>

                                                                    <cal:ActionMessage MethodName="OpenRecentFile">
                                                                        <!--<cal:Parameter Value="{Binding ElementName=RecentFiles, Path=SelectedItem}"/>
                                                                    <cal:Parameter Value="{Binding ElementName=Backstage}"/>-->
                                                                        <cal:Parameter Value="{x:Null}"/>
                                                                        <cal:Parameter Value="{x:Null}"/>
                                                                    </cal:ActionMessage>
                                                                </cal:Action.Target>
                                                            </i:EventTrigger>
                                                        </i:Interaction.Triggers>
                                                    </Border>

                                                </DataTemplate>
                                            </ListView.ItemTemplate>
                                                
                                        </ListView>
                     


                                </Grid>
                            


                        </Fluent:BackstageTabItem>
                        <!--<Fluent:Button x:Name="NewQuery" Header="New Query"></Fluent:Button>-->

                        <Fluent:Button Name="btnSave" 
                                   Header="Save" 
                                   Foreground="{DynamicResource Fluent.Ribbon.Brushes.Backstage.BackButton.Foreground}" 
                                   HorizontalContentAlignment="Left"
                                   Height="30"
                                   cal:Message.Attach="[Event Click] = [Action Save]">
                        </Fluent:Button>

                        <Fluent:Button Name="btnSaveAs" 
                                   Header="Save As" 
                                   Height="30"
                                   Foreground="{DynamicResource Fluent.Ribbon.Brushes.Backstage.BackButton.Foreground}"
                                   cal:Message.Attach="[Event Click] = [Action SaveAs]">
                        </Fluent:Button>

                        <Fluent:BackstageTabItem Header="Options" Height="30">
                            <ContentControl x:Name="Options" cal:View.Model="{Binding Path=Options}"  />
                        </Fluent:BackstageTabItem>

                                               
                        <Fluent:Button Name="btnExit" 
                                   Header="Exit" 
                                   Foreground="{DynamicResource Fluent.Ribbon.Brushes.Backstage.BackButton.Foreground}"  
                                   VerticalAlignment="Bottom"
                                   DockPanel.Dock="Bottom"
                                   IsDefinitive="False"
                                   cal:Message.Attach="[Event Click] = [Action Exit($view)]">
                                       
                            <!--<i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <cal:Action.Target>
                                        <cal:ActionMessage MethodName="Exit"/>
                                    </cal:Action.Target>

                                </i:EventTrigger>
                            </i:Interaction.Triggers>-->
                        </Fluent:Button>

                        <Fluent:BackstageTabItem Height="190" DockPanel.Dock="Bottom">
                            <Fluent:BackstageTabItem.Template>
                                <ControlTemplate>
                            <Image x:Name="backImage" 
                               Source="{DynamicResource logo_transparentDrawingImage}"
                               DockPanel.Dock="Bottom"
                               Width="120"
                               Height="120"
                               />
                                </ControlTemplate>
                            </Fluent:BackstageTabItem.Template>
                        </Fluent:BackstageTabItem>
                        

                        <!--<Fluent:BackstageTabItem DockPanel.Dock="Bottom">
                            <Fluent:BackstageTabItem.Header>
                                <Image x:Name="backImage" Source="{DynamicResource logo_transparentDrawingImage}"
                               />
                            </Fluent:BackstageTabItem.Header>
                        </Fluent:BackstageTabItem>-->
                        
                    </Fluent:BackstageTabControl>
                    
                </Fluent:Backstage>
            </Grid>
        </Fluent:Ribbon.Menu>

        
  
        <!-- Home Tabs-->

        
        <Fluent:RibbonTabItem Header="Home" ReduceOrder="Query, 
                              Connection,Query,Connection,Connection,
                              Traces,Traces,Traces,
                              ServerTimings,Format
                              Edit,Find,
                              ServerTimings,ServerTimings,
                              Format,Format,
                              Find,Find,
                              Edit,Edit
                              " 
                              Template="{DynamicResource DaxStudioRibbonTabItemControlTemplate}"
                              KeyTip="H"
                              >


            <Fluent:RibbonGroupBox Header="Query" 
                                   x:Name="Query" 
                                   Margin="4,0" 
                                   Icon="{DynamicResource runDrawingImage}">
                <Fluent:SplitButton Name="RunQuery"
                               Header="Run"
                                    KeyTip="R"
                               cal:Message.Attach="[Event Click] = [Action RunQuery()]"
                               ap:ImageBindingHelper.IconResourceKey="{Binding SelectedRunStyle.ImageResource}"
                               MinWidth="50"
                               SizeDefinition="Large,Large,Small"
                               Margin="4,0">
                    <Fluent:SplitButton.ToolTip>
                        <Fluent:ScreenTip Title="{Binding RunQueryTitle}"
                                          Text="{Binding Path=SelectedRunStyle.Tooltip}"
                                          DisableReason="{Binding RunQueryDisableReason}"
                                           ></Fluent:ScreenTip>
                    </Fluent:SplitButton.ToolTip>
                    <Fluent:Gallery
                        x:Name="RunStyles"
                        MaxItemsInRow="1"
                        ItemHeight="40"
                        ItemsSource="{Binding RunStyles}"
                        SelectedItem="{Binding SelectedRunStyle}"
                        ItemTemplate="{DynamicResource RunStyleTemplate}"
                        
                        Fluent:GalleryItem.Click="RunStyles_Click"
                        >
                        
                    </Fluent:Gallery>
                </Fluent:SplitButton>
                <Fluent:Button Name="CancelQuery"
                               Header="Cancel"
                               KeyTip="CA"
                               cal:Message.Attach="[Event Click] = [Action CancelQuery()]"
                               Icon="{DynamicResource cancelDrawingImage}"
                               LargeIcon="{DynamicResource cancelDrawingImage}"
                               Margin="4,0"
                               >
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Cancel Query (Esc)"
                                          Text="Sends a cancel command to a currently running query"
                                          DisableReason="{Binding CancelQueryDisableReason}"
                                          ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>

                
                    <Fluent:ToggleButton 
                    Header="Query Builder"
                    Name="DisplayQueryBuilder" 
                        KeyTip="Q"
                    IsEnabled="{Binding CanDisplayQueryBuilder}"
                    IsChecked="{Binding DisplayQueryBuilder}"
                    Icon="{DynamicResource query_builderDrawingImage}"
                    LargeIcon="{DynamicResource query_builderDrawingImage}"
                    SizeDefinition="Large">
                        <Fluent:ToggleButton.ToolTip>
                            <Fluent:ScreenTip Title="Query Builder" Text="Displays a drag and drop query builder"/>
                        </Fluent:ToggleButton.ToolTip>
                    </Fluent:ToggleButton>
                

            </Fluent:RibbonGroupBox>
            
            <Fluent:RibbonGroupBox Header="Cache">

                    <Fluent:Button Name="ClearCache"
                               Header="Clear Cache"
                                   KeyTip="CC"
                               cal:Message.Attach="[Event Click] = [Action ClearCache()]"
                                    Size="Large"
                               Icon="{DynamicResource clear_cacheDrawingImage}"
                               LargeIcon="{DynamicResource clear_cacheDrawingImage}"
                               Margin="4,0"
                               >
                        <Fluent:Button.ToolTip>
                            <Fluent:ScreenTip Title="Clear Cache before every Run"
                                          Text="Clears the cache for the current database"
                                          DisableReason="{Binding ClearCacheDisableReason}"
                                          ></Fluent:ScreenTip>
                        </Fluent:Button.ToolTip>


                    </Fluent:Button>

                    <Fluent:ToggleButton Name="ClearCacheAuto"
                               Header="Clear on Run"
                                         KeyTip="CR"
                               Size="Large"
                               Icon="{DynamicResource clear_cache_on_runDrawingImage}"
                               LargeIcon="{DynamicResource clear_cache_on_runDrawingImage}"
                               Margin="4,0"
                               IsEnabled="{Binding CanClearCacheAuto}"
                               IsChecked="{Binding ClearCacheAuto}"
                               >
                        <Fluent:ToggleButton.ToolTip>
                            <Fluent:ScreenTip Title="Clear Cache before every Run"
                                          Text="Clears the cache every time before running a query"
                                          DisableReason="{Binding ClearCacheDisableReason}"
                                          ></Fluent:ScreenTip>
                        </Fluent:ToggleButton.ToolTip>


                    </Fluent:ToggleButton>
                </Fluent:RibbonGroupBox>

            <Fluent:RibbonGroupBox Header="Output">
                <!-- Output Targets -->
                <!-- Style="{DynamicResource GalleryDropDownButtonStyle}"
                Style="{StaticResource DaxStudioGalleryDropDownButtonStyle}"-->
                <Fluent:DropDownButton x:Name="OutputTargets"
                                       Header="Results"
                                       KeyTip="R"
                                       ap:ImageBindingHelper.IconResourceKey="{Binding SelectedTarget.ImageResource}"
                                       SizeDefinition="Large,Large,Small"
                                       IsEnabled="True"
                                       VerticalAlignment="Top"  Margin="4,0"
                                       
                                       >
                    <Fluent:Gallery 
                        x:Name="OutputGallery2"
                        MaxItemsInRow="1"
                        Orientation="Vertical"
                        ItemHeight="40"
                        ItemWidth="150"
                        ItemsSource="{Binding ResultsTargets}" 
                        SelectedItem="{Binding SelectedTarget}"
                        ItemTemplate="{DynamicResource ResultsTargetTemplate}"
                        >

                    </Fluent:Gallery>
                    <Fluent:DropDownButton.ToolTip>
                        <Fluent:ScreenTip Title="Output Target" Text="This specifies where the query results get sent" Width="190" />
                    </Fluent:DropDownButton.ToolTip>
                </Fluent:DropDownButton>

            </Fluent:RibbonGroupBox>

            <Fluent:RibbonGroupBox Header="Edit" Name="Edit" Margin="4,0" Icon="{DynamicResource cutDrawingImage}">
                <Fluent:Button x:Name="Cut"
                                Fluent:KeyTip.Keys="X"
                                Header="Cut"
                                Icon="{DynamicResource cutDrawingImage}"
                                SizeDefinition="Middle,Small,Small"
                                Command="Cut"
                                FocusManager.IsFocusScope="True" Size="Middle"
                                >
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Cut (Ctrl+X)"
                                          Text="Cut the contents to the Clipboard."
                                          DisableReason="Nothing is currently selected"
                                          Width="190" />
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button x:Name="Copy"
                               Fluent:KeyTip.Keys="C"
                               Header="Copy"
                               Icon="{DynamicResource copyDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Command="ApplicationCommands.Copy"
                               FocusManager.IsFocusScope="True"
                               >
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Copy (Ctrl+C)"
                                              Text="Copy the contents to the Clipboard."
                                              DisableReason="Nothing is currently selected"
                                              Width="190" />
                    </Fluent:Button.ToolTip>
                </Fluent:Button>

                <Fluent:Button x:Name="Paste"
                               Fluent:KeyTip.Keys="V"
                               Header="Paste"
                               Icon="{DynamicResource clipboardDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Command="Paste"
                               IsEnabled="True"
                               FocusManager.IsFocusScope="True"
                               >
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Paste (Ctrl+V)"
                                              Text="Paste the contents from the Clipboard."
                                              DisableReason="The currently selected control does not support Paste or the clipboard is empty"
                                              Width="190" />
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button x:Name="undoButton"
                               Header="Undo"
                               Fluent:KeyTip.Keys="Z"
                               cal:Message.Attach="[Event Click] = [Action Undo()]"
                               Icon="{DynamicResource undoDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Margin="4,0"
                               FocusManager.IsFocusScope="True">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Undo (Ctrl+Z)"
                                          Text="Undoes previous actions"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button x:Name="redoButton"
                               Header="Redo"
                               Fluent:KeyTip.Keys="Y"
                               cal:Message.Attach="[Event Click] = [Action Redo()]"
                               Icon="{DynamicResource redoDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Margin="4,0"
                               FocusManager.IsFocusScope="True">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Redo (Ctrl+Y)"
                                          Text="Re-does changes that were previously undone"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>

                
            </Fluent:RibbonGroupBox>

            <!-- Hidden Save Button for Quicklink target -->
            <Fluent:RibbonGroupBox Visibility="Collapsed">
            <Fluent:Button Name="saveButtonQat"
                               Header="Save"
                               Fluent:KeyTip.Keys="S"
                               cal:Message.Attach="[Event Click] = [Action Save()]"
                               Icon="{DynamicResource file_saveDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Margin="4,0">
                <Fluent:Button.ToolTip>
                    <Fluent:ScreenTip Title="Save (Ctrl+S)"
                                          Text="Saves the current document"
                                           ></Fluent:ScreenTip>
                </Fluent:Button.ToolTip>
            </Fluent:Button>

                <Fluent:Button Name="newButtonQat"
                               Header="New"
                               Fluent:KeyTip.Keys="N"
                               cal:Message.Attach="[Event Click] = [Action NewQuery()]"
                               Icon="{DynamicResource file_newDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Margin="4,0">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="New (Ctrl+N)"
                                          Text="Opens a new document"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
            </Fluent:RibbonGroupBox>


            <Fluent:RibbonGroupBox Header="Format" Name="Format" Margin="4,0" Icon="{DynamicResource uppercaseDrawingImage}">
                <Fluent:SplitButton Name="FormatQuery"
                                    KeyTip="F"
                               Header="Format Query"
                               cal:Message.Attach="[Event Click] = [Action FormatQueryStandard()]"
                               IsEnabled="{Binding CanFormatQueryStandard}"
                               
                               Icon="{DynamicResource dax_formatterDrawingImage}"
                               LargeIcon="{DynamicResource dax_formatterDrawingImage}" 
                               SizeDefinition="Large,Large,Large"
                               Margin="0,0,10,0"
                               FocusManager.IsFocusScope="True"
                               >
                    <Fluent:SplitButton.ToolTip>
                        <Fluent:ScreenTip Title="{Binding FormatQueryTitle}"
                                          Text="Uses DaxFormatter.com to provide a nicely formatted query and highlight syntax errors"
                                          DisableReason="{Binding FormatQueryDisabledReason}"
                                           ></Fluent:ScreenTip>
                    </Fluent:SplitButton.ToolTip>
                    <!--<Fluent:SplitButton.ContextMenu>
                        <ContextMenuEx></ContextMenuEx>
                    </Fluent:SplitButton.ContextMenu>-->
                    
                    <Fluent:MenuItem Header="{Binding FormatQueryStandardTitle}" cal:Message.Attach="[Event Click] = [Action FormatQueryStandard()]" />
                    <Fluent:MenuItem Header="{Binding FormatQueryAlternateTitle}" cal:Message.Attach="[Event Click] = [Action FormatQueryAlternate()]"  />
                    <!--<Fluent:Gallery ScrollViewer.VerticalScrollBarVisibility="Hidden"
                                        Orientation="Vertical"
                                        GroupBy="Tag"
                                        Selectable="False"
 >
                        <Fluent:GalleryItem cal:Message.Attach="[Event Click] = [Action FormatQueryStandard()]" >
                            <TextBlock Text="{Binding FormatQueryStandardTitle}" Margin="2"
                                       
                                       />
                        </Fluent:GalleryItem>
                        <Fluent:GalleryItem cal:Message.Attach="[Event Click] = [Action FormatQueryAlternate()]" >
                            <TextBlock Text="{Binding FormatQueryAlternateTitle}" Margin="2"
                                       
                                       />
                        </Fluent:GalleryItem>
                    </Fluent:Gallery>-->
                </Fluent:SplitButton>
                

                <Fluent:Button Name="ToUpper"
                               Header="To Upper"
                               KeyTip="U"
                               cal:Message.Attach="[Event Click] = [Action ToUpper()]"
                               Icon="{DynamicResource uppercaseDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Margin="4,0"
                               FocusManager.IsFocusScope="True">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="{Binding ToUpperTitle}"
                                          Text="Converts the selected text to Uppercase"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button Name="ToLower"
                               Header="To Lower"
                               KeyTip="L"
                               cal:Message.Attach="[Event Click] = [Action ToLower()]"
                               Icon="{DynamicResource lowercaseDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Margin="4,0"
                               FocusManager.IsFocusScope="True">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="{Binding ToLowerTitle}"
                                          Text="Converts the selected text to Lowercase"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>

                <Fluent:Button Name="SwapDelimiters"
                               Header="Swap Delimiters"
                               KeyTip="S"
                               cal:Message.Attach="[Event Click] = [Action SwapDelimiters()]"
                               Icon="{DynamicResource swap_delimitersDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Margin="4,0"
                               FocusManager.IsFocusScope="True"
                               Visibility="{Binding ShowSwapDelimiters, Converter={StaticResource BoolToVisibilityConverter}}">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="{Binding SwapDelimitersTitle}"
                                          Text="Swaps the delimiters in the selected text between the comma and semi-colon styles"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                
                <Fluent:Button Name="DebugCommas"
                               Header="Debug Commas"
                               KeyTip="D"
                               cal:Message.Attach="[Event Click] = [Action MoveCommasToDebugMode()]"
                               Icon="{DynamicResource debug_commas_smallDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Margin="4,0"
                               FocusManager.IsFocusScope="True"
                               Visibility="{Binding ShowDebugCommas, Converter={StaticResource BoolToVisibilityConverter}}">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="{Binding DebugCommasTitle}"
                                          Text="Move the comma at the end of a line to the beginning of the next line"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                
                <Fluent:Button Name="CommentSelection"
                               Header="Comment"
                               KeyTip="M"
                               cal:Message.Attach="[Event Click] = [Action CommentSelection()]"
                               Icon="{DynamicResource commentDrawingImage}"
                               SizeDefinition="Middle,Middle,Small"
                               Margin="4,0">
                        <Fluent:Button.ToolTip>
                            <Fluent:ScreenTip Title="{Binding CommentSelectionTitle}"
                                          Text="Comments the selected lines"
                                           ></Fluent:ScreenTip>
                        </Fluent:Button.ToolTip>
                    </Fluent:Button>
                
                    <Fluent:Button Name="UncommentSelection"
                               Header="Uncomment"
                                   KeyTip="N"
                               cal:Message.Attach="[Event Click] = [Action UncommentSelection()]"
                               Icon="{DynamicResource uncommentDrawingImage}"
                               SizeDefinition="Middle,Middle,Small"
                               Margin="4,0">
                        <Fluent:Button.ToolTip>
                            <Fluent:ScreenTip Title="{Binding UncommentSelectionTitle}"
                                          Text="Uncomments the selected lines"
                                           ></Fluent:ScreenTip>
                        </Fluent:Button.ToolTip>
                    </Fluent:Button>
                <Fluent:Button Name="MergeParameters"
                               Header="Merge XML"
                               KeyTip="MX"
                               cal:Message.Attach="[Event Click] = [Action MergeParameters()]"
                               Icon="{DynamicResource merge_xmlDrawingImage}"
                               SizeDefinition="Middle,Middle,Small"
                               Margin="4,0">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Merge Parameters"
                                          Text="Merges Parameter XML block from a profiler trace"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                
            </Fluent:RibbonGroupBox>
  
            <Fluent:RibbonGroupBox Header="Find" Name="Find" Margin="4,0" Icon="{DynamicResource findDrawingImage}">
                <Fluent:Button Header="Find" 
                               Command="Find"
                               Icon="{DynamicResource findDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Fluent:KeyTip.Keys="F"
                               FocusManager.IsFocusScope="True">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Find (Ctrl-F)" Text="Find text within the current query" Width ="190"/>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button Header="Replace" 
                               Command="Replace"
                               Icon="{DynamicResource replaceDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Fluent:KeyTip.Keys="H"
                               FocusManager.IsFocusScope="True">
                <Fluent:Button.ToolTip>
                    <Fluent:ScreenTip Title="Replace (Ctrl-H)" Text="Replace text within the current query" Width ="190"/>
                </Fluent:Button.ToolTip>
                </Fluent:Button>
            </Fluent:RibbonGroupBox>

            <Fluent:RibbonGroupBox Header="Power BI" 
                                   Name="PowerBI" 
                                   Margin="0,0" 
                                   >
                <Fluent:Button Name="ImportPowerBIPerfData" 
                               Header="Load Perf Data" 
                               KeyTip="P"
                               cal:Message.Attach="[Event Click] = [Action LoadPowerBIPerformanceData()]"
                               Icon="{DynamicResource load_perf_dataDrawingImage}"
                               LargeIcon="{DynamicResource load_perf_dataDrawingImage}"
                               Margin="4,0"
                               SizeDefinition="Large,Large,Small"
                               >
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Load Power BI Performance Data"  Text="Import performance data that has been exported from the Power BI Performance Analyzer"></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
            </Fluent:RibbonGroupBox>


            <Fluent:RibbonGroupBox Header="Traces" Name="Traces" ItemsSource="{Binding TraceWatchers}"
                                   Icon="{DynamicResource query_planDrawingImage}"
                                   ItemTemplate="{DynamicResource TraceWatcherTemplate}"
                                   >
                
            </Fluent:RibbonGroupBox>
            
            

            <Fluent:RibbonGroupBox Header="Connection" Name="Connection" Margin="2,0" Icon="{DynamicResource connectDrawingImage}" >
                <Fluent:Button x:Name="Connect" 
                               Header="Connect"
                               KeyTip="CO"
                               Icon="{DynamicResource connectDrawingImage}"
                               LargeIcon="{DynamicResource connectDrawingImage}" 
                               Margin="0,0"
                               cal:Message.Attach="[Event Click] = [Action Connect()]" 
                               SizeDefinition="Large,Large,Small">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Connect" 
                                          Text="Changes the connection for the current query" 
                                          DisableReason="{Binding ClearCacheDisableReason}"
                                          Width="190"/>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                                
                
               
                <Fluent:Button Name="RefreshMetadata"
                               Header="Refresh Metadata"
                               KeyTip="R"
                               cal:Message.Attach="[Event Click] = [Action RefreshMetadata()]"
                               Icon="{DynamicResource refreshDrawingImage}"
                               LargeIcon="{DynamicResource refreshDrawingImage}"
                               Margin="0,0"
                               SizeDefinition="Large,Large,Small"
                               >
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Refresh Metadata"
                                          Text="Refreshes the table and column metadata for the current database"
                                          DisableReason="{Binding RunQueryDisableReason}"
                                          ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>

                </Fluent:RibbonGroupBox>
                 
        </Fluent:RibbonTabItem>

            <!-- Advanced Ribbon Tab-->
       
        <Fluent:RibbonTabItem Header="Advanced" KeyTip="A">
            <Fluent:RibbonGroupBox Header="Metrics" >
                <Fluent:Button Name="ImportAnalysisData"
                                   Header="Import Metrics"
                               KeyTip="I"
                                   cal:Message.Attach="[Event Click] = [Action ImportAnalysisData()]"
                                   Icon="{DynamicResource open_metricsDrawingImage}"
                                   LargeIcon="{DynamicResource open_metricsDrawingImage}"
                                   Margin="4,0"
                                   SizeDefinition="Large,Large,Small">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Import Metrics"
                                   Text="Imports information and metrics from a *.vpax file to allow for detailed analysis of the model design. The import only includes metadata and size of objects, no actual data is included."
                                   DisableReason="{Binding ClearCacheDisableReason}"
                                   ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button Name="ExportAnalysisData"
                                   Header="Export Metrics"
                               KeyTip="E"
                                   cal:Message.Attach="[Event Click] = [Action ExportAnalysisData()]"
                                   Icon="{DynamicResource export_metricsDrawingImage}"
                                   LargeIcon="{DynamicResource export_metricsDrawingImage}"
                                   Margin="4,0"
                                   SizeDefinition="Large,Large,Small">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Export Metrics"
                                   Text="Exports information and metrics about your model to allow for detailed analysis of the model design. This export only includes metadata and size of objects, no actual data is included."
                                   DisableReason="{Binding ClearCacheDisableReason}"
                                   ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button Name="ViewAnalysisData"
                                   Header="View Metrics"
                               KeyTip="V"
                                   cal:Message.Attach="[Event Click] = [Action ViewAnalysisData()]"
                                   Icon="{DynamicResource vertipaq_analyzerDrawingImage}"
                                   LargeIcon="{DynamicResource vertipaq_analyzerDrawingImage}"
                                   Margin="4,0"
                                   SizeDefinition="Large,Large,Small">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="View Metrics"
                                   Text="Display information and metrics about your model to allow for detailed analysis of the model design."
                                   DisableReason="{Binding ClearCacheDisableReason}"
                                   ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
            </Fluent:RibbonGroupBox>
            <Fluent:RibbonGroupBox Header="Export" >
                <Fluent:Button Name="ExportAllData"
                                   Header="Export Data"
                               KeyTip="X"
                                   cal:Message.Attach="[Event Click] = [Action ExportAllData()]"
                                   Icon="{DynamicResource export_dataDrawingImage}"
                                   LargeIcon="{DynamicResource export_dataDrawingImage}"
                                   Margin="4,0"
                                
                                   SizeDefinition="Large,Large,Small">
                        <Fluent:Button.ToolTip>
                            <Fluent:ScreenTip Title="Export Data"
                                   Text="Exports entire Tables from your tabular database to CSV files or SQL Server tables."                                
                                   ></Fluent:ScreenTip>
                        </Fluent:Button.ToolTip>
                    </Fluent:Button>
                
            </Fluent:RibbonGroupBox>

            <Fluent:RibbonGroupBox Header="Security">
                <Fluent:Button Header="View As" x:Name="ViewAs" Size="Large" MinWidth="48"
                               KeyTip="VA"
                               cal:Message.Attach="[Event Click] = [Action ShowViewAsDialog()]"
                               Icon="{DynamicResource view_asDrawingImage}"
                               LargeIcon="{DynamicResource view_asDrawingImage}"
                               SizeDefinition="Large,Large,Small">

                </Fluent:Button>
            </Fluent:RibbonGroupBox>
            
            <Fluent:RibbonGroupBox Header="Performance">
                <Fluent:Button
                    Name="RunBenchmark"
                    Header="Run Benchmark"
                    KeyTip="B"
                    cal:Message.Attach="[Event Click] = [Action RunBenchmark()]"
                    Icon="{DynamicResource run_benchmarkDrawingImage}"
                    LargeIcon="{DynamicResource run_benchmarkDrawingImage}"
                    Margin="4,0"
                    SizeDefinition="Large,Middel,Small"
                    
                    >
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Run Benchmark"
                                          Text="Runs the given query a number of times against a cold and warm cache and reports the timing details"
                                          DisableReason="You must have admin rights against the data source in order to create the Timings trace to capture the detailed timing information"
                            />
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button
                    Name="FEBenchmark"
                    Header="Server FE Benchmark"
                    KeyTip="F"
                    cal:Message.Attach="[Event Click] = [Action RunServerFEBenchmark()]"
                    Icon="{DynamicResource fe_benchmarkDrawingImage}"
                    LargeIcon="{DynamicResource fe_benchmarkDrawingImage}"
                    Margin="4,0"
                    SizeDefinition="Large,Middel,Small"
                    Visibility="{Binding ShowFEBenchmark, Converter={StaticResource BoolToVisibilityConverter}}"
                    >
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Server FE Benchmark"
                                          Text="Runs a formula engine benchmark to determine server performance"
                                          DisableReason="You must have admin rights against the data source in order to create the Timings trace to capture the detailed timing information"
                            />
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button
                        Name="RunQueryDiagnostics"
                        Header="Capture Diagnostics"
                        IsEnabled="{Binding CanRunQuery}"
                        KeyTip="B"
                        cal:Message.Attach="[Event Click] = [Action CaptureDiagnostics()]"
                        Icon="{DynamicResource capture_diagnosticsDrawingImage}"
                        LargeIcon="{DynamicResource capture_diagnosticsDrawingImage}"
                        Margin="4,0"
                        SizeDefinition="Large,Middel,Small"
                        >
                                        <Fluent:Button.ToolTip>
                                        <Fluent:ScreenTip Title="Capture Diagnostics"
                                              Text="Runs the given query and automatically captures Server Timings, Query Plan and model metrics"
                                              DisableReason="You must have admin rights against the data source in order to create the Timings trace to capture the detailed timing information"
                                />
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
            </Fluent:RibbonGroupBox>
            <Fluent:RibbonGroupBox Header="External Tools">
                <Fluent:Button Name="LaunchSqlProfiler"
                                   Header="SQL Profiler"
                               KeyTip="S"
                                   cal:Message.Attach="[Event Click] = [Action LaunchSqlProfiler()]"
                                   LargeIcon="{DynamicResource sql_profilerDrawingImage}"
                                   Margin="4,0"
                                   SizeDefinition="Large,Large,Small"
                                   >
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="SQL Profiler"
                                   Text="Launches the SQL Profiler utility connected to the current data source."
                                   DisableReason="Not able to find SQL Profiler on your PC"
                                   ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button Name="LaunchExcel"
                                   Header="Analyze in Excel"
                               KeyTip="XL"
                                   cal:Message.Attach="[Event Click] = [Action LaunchExcel()]"
                                   LargeIcon="{DynamicResource analyze_in_excelDrawingImage}"
                                   Margin="4,0"
                                   SizeDefinition="Large,Large,Small"
                                   >
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Analyze in Excel"
                                   Text="Launches Excel and creates a Pivot Table connected to the current data source."
                                   ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
            </Fluent:RibbonGroupBox>
            <Fluent:RibbonGroupBox Header="Utilities">
                <Fluent:Button Name="SwapDelimitersUtils"
                               Header="Swap Delimiters"
                               KeyTip="S"
                               cal:Message.Attach="[Event Click] = [Action SwapDelimiters()]"
                               Icon="{DynamicResource swap_delimitersDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Margin="4,0"
                               FocusManager.IsFocusScope="True"
                               Visibility="{Binding ShowDebugCommas, Converter={StaticResource BoolToVisibilityConverter}}">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="{Binding SwapDelimitersTitle}"
                                          Text="Swaps the delimiters in the selected text between the comma and semi-colon styles"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>

                <Fluent:Button Name="DebugCommasUtils"
                               Header="Debug Commas"
                               KeyTip="D"
                               cal:Message.Attach="[Event Click] = [Action MoveCommasToDebugMode()]"
                               Icon="{DynamicResource debug_commas_smallDrawingImage}"
                               SizeDefinition="Middle,Small,Small"
                               Margin="4,0"
                               FocusManager.IsFocusScope="True"
                               Visibility="{Binding ShowSwapDelimiters, Converter={StaticResource BoolToVisibilityConverter}}">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="{Binding DebugCommasTitle}"
                                          Text="Move the comma at the end of a line to the beginning of the next line"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
            </Fluent:RibbonGroupBox>
        </Fluent:RibbonTabItem>


        <!-- DEBUG Ribbon -->

        <Fluent:RibbonTabItem Header="Debug" Visibility="{Binding IsDebugBuild, Converter={StaticResource BoolToVisibilityConverter}}">

            <Fluent:RibbonGroupBox Header="Crash Reporting">
                <Fluent:Button Name="CrashTest"
                               Header="Crash Test"
                               cal:Message.Attach="[Event Click] = [Action CrashTest()]"

                                   Margin="4,0"
                                   SizeDefinition="Large,Large,Large">
                    <Fluent:Button.LargeIcon>
                        <Image Source="{DynamicResource warningDrawingImage}" Width="32"></Image>
                    </Fluent:Button.LargeIcon>
                </Fluent:Button>

                </Fluent:RibbonGroupBox>
                <Fluent:RibbonGroupBox Header="Window Layout">
                    <Fluent:Button Name="SaveLayout"
                               Header="Save Layout"
                               cal:Message.Attach="[Event Click] = [Action SaveLayout()]"

                                   Margin="4,0"
                                   SizeDefinition="Middle,Small,Small"></Fluent:Button>

                <Fluent:Button Name="LoadLayout"
                               Header="Load Layout"
                               cal:Message.Attach="[Event Click] = [Action LoadLayout()]"

                                   Margin="4,0"
                                   SizeDefinition="Middle,Small,Small"></Fluent:Button>

                <Fluent:Button Name="ResetLayout"
                               Header="Reset Layout"
                               cal:Message.Attach="[Event Click] = [Action ResetLayout()]"

                                   Margin="4,0"
                                   SizeDefinition="Middle,Small,Small"></Fluent:Button>
                <Fluent:ComboBox Header="Theme" 
                                 SelectedValue="{Binding Theme}" 
                                 SelectedValuePath="Text" 
                                 DisplayMemberPath="Text"
                                 IsEditable="False">
                    <TextBlock Text="Light" />
                    <TextBlock Text="Dark" />
                </Fluent:ComboBox>
            </Fluent:RibbonGroupBox>
            <Fluent:RibbonGroupBox Header="Experimental Features">
                <Fluent:Button Header="Open Connection" x:Name="OpenConnection" Size="Middle"
                               cal:Message.Attach="[Event Click] = [Action OpenConnection()]">


                </Fluent:Button>
                <Fluent:Button Header="Close Connection" x:Name="CloseConnection" Size="Middle"
                               cal:Message.Attach="[Event Click] = [Action CloseConnection()]">

                </Fluent:Button>



            </Fluent:RibbonGroupBox>
            <Fluent:RibbonGroupBox Header="Testing">
                
            </Fluent:RibbonGroupBox>
        </Fluent:RibbonTabItem>    
          
            
        <!-- Help Tab -->
        <Fluent:RibbonTabItem Header="Help" KeyTip="P">
            <Fluent:RibbonGroupBox Header="Resources" Margin="0,0,4,0">
                <Fluent:Button Name="helpDaxStudioWiki"
                               Header="Documentation"
                               KeyTip="D"
                               cal:Message.Attach="[Event Click] = [Action LinkToDaxStudioWiki()]"
                               Icon="{DynamicResource documentationDrawingImage}"
                               LargeIcon="{DynamicResource documentationDrawingImage}"
                               SizeDefinition="Large,Small"
                               Margin="4,0">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="DAX Studio Help"
                                          Text="Links to the documentation on the DAX Studio website"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button Name="hlpDaxForum"
                               Header="DAX Forum"
                               KeyTip="X"
                               cal:Message.Attach="[Event Click] = [Action LinkToDaxForum()]"
                               Icon="{DynamicResource linkDrawingImage}"
                               SizeDefinition="Middle,Small"
                               Margin="4,0">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="DAX Forum"
                                          Text="Link to the DAX Forum"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button Name="hlpPbiForum"
                               Header="Power BI Desktop Forum"
                               KeyTip="P"
                               cal:Message.Attach="[Event Click] = [Action LinkToPbiDesktopForum()]"
                               Icon="{DynamicResource linkDrawingImage}"
                               SizeDefinition="Middle,Small"
                               Margin="4,0">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Power BI Desktop Forum"
                                          Text="Link to the Power BI Desktop Forum"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button Name="hlpSSASForum"
                               Header="Analysis Services Forum"
                               KeyTip="A"
                               cal:Message.Attach="[Event Click] = [Action LinkToSsasForum()]"
                               Icon="{DynamicResource linkDrawingImage}"
                               SizeDefinition="Middle,Small"
                               Margin="4,0">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Analysis Services Forum"
                                          Text="Link to the Analysis Services MSDN Forum"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                
            </Fluent:RibbonGroupBox>

            <Fluent:RibbonGroupBox Header="Issues">

                <Fluent:Button Name="hlpGithubBugReport"
                               Header="Report a Bug"
                               KeyTip="B"
                               cal:Message.Attach="[Event Click] = [Action LinkToGithubBugReport()]"
                               SizeDefinition="Large,Middle,Small"
                               Margin="4,0"
                               Icon="{DynamicResource report_bugDrawingImage}"
                               LargeIcon="{DynamicResource report_bugDrawingImage}">


                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Report a Bug"
                                          Text="Submit a bug report to the GitHub project site for DAX Studio"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button Name="hlpGithubFeatureRequest"
                               Header="Request a Feature"
                               KeyTip="R"
                               cal:Message.Attach="[Event Click] = [Action LinkToGithubFeatureRequest()]"

                               SizeDefinition="Large,Middle,Small"
                               Margin="4,0"
                               Icon="{DynamicResource request_featureDrawingImage}"
                               LargeIcon="{DynamicResource request_featureDrawingImage}">

                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Feature Request"
                                          Text="Submit an idea for a new feature to the GitHub project site for DAX Studio"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>

                <Fluent:Button Name="hlpGithubDiscussion"
                               Header="Ask a Question"
                               KeyTip="Q"
                               cal:Message.Attach="[Event Click] = [Action LinkToGithubDiscussions()]"
                               SizeDefinition="Large,Middle,Small"
                               Margin="4,0"
                               Icon="{DynamicResource ask_questionDrawingImage}"
                               LargeIcon="{DynamicResource ask_questionDrawingImage}">

                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Ask a Question"
                                          Text="Start a discussion on the GitHub project site for DAX Studio. You can ask questions or suggest features and improvements."
                        ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
            </Fluent:RibbonGroupBox>
            <Fluent:RibbonGroupBox Header="" Margin="0,0,4,0">
                <Fluent:Button Name="hlpDonate"
                               Header="Donate"
                               KeyTip="N"
                               cal:Message.Attach="[Event Click] = [Action LinkToSponsors()]"
                               Icon="{DynamicResource donateDrawingImage}"
                               LargeIcon="{DynamicResource donateDrawingImage}"
                               SizeDefinition="Large,Middle"
                               Margin="4,0">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Donate"
                                          Text="Contribute to DAX Studio development with a donation or a sponsorship"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
                <Fluent:Button Name="hlpAbout"
                               Header="About DAX Studio"
                               KeyTip="I"
                               cal:Message.Attach="[Event Click] = [Action ShowHelpAbout()]"
                               Icon="{DynamicResource aboutDrawingImage}"
                               LargeIcon="{DynamicResource aboutDrawingImage}"
                               SizeDefinition="Large,Middle"
                               Margin="4,0">
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Help About"
                                          Text="Shows version information"
                                           ></Fluent:ScreenTip>
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
            </Fluent:RibbonGroupBox>


        </Fluent:RibbonTabItem>

        <Fluent:RibbonTabItem
            Header="Layout"
            x:Name="tabTrace"
            Group="{Binding Source={x:Reference traceLayoutGroup}}"
            >
        </Fluent:RibbonTabItem>

        <Fluent:Ribbon.ContextualGroups>
            <Fluent:RibbonContextualTabGroup 
                x:Name="traceLayoutGroup"
                Header="Traces" 
                Visibility="Collapsed"
                Background="{StaticResource DaxStudioBrush}" 
                BorderBrush="{StaticResource DaxStudioBrush}" />
        </Fluent:Ribbon.ContextualGroups>
    </Fluent:Ribbon>

</UserControl>
