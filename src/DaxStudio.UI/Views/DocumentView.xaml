<UserControl 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:desdata="clr-namespace:DaxStudio.UI.ViewModels.DesignData"
    xmlns:avalondock="https://github.com/Dirkster99/AvalonDock"
    xmlns:avalonedit="clr-namespace:ICSharpCode.AvalonEdit.CodeCompletion;assembly=ICSharpCode.AvalonEdit"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:cal="clr-namespace:Caliburn.Micro;assembly=Caliburn.Micro.Platform"
    xmlns:dax="clr-namespace:DAXEditorControl;assembly=DAXEditor" 
    xmlns:beh="clr-namespace:DaxStudio.UI.Behaviours"
    xmlns:dd="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
    xmlns:local="clr-namespace:DaxStudio.UI.Utils"
    xmlns:selectors="clr-namespace:DaxStudio.UI.TemplateSelectors"
    xmlns:attached="clr-namespace:DaxStudio.UI.AttachedProperties"
    xmlns:conv="clr-namespace:DaxStudio.UI.Converters"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:ap="clr-namespace:DaxStudio.UI.AttachedProperties"
    xmlns:res="clr-namespace:DaxStudio.UI.Resources"
    xmlns:fm="clr-namespace:ICSharpCode.AvalonEdit.Folding;assembly=ICSharpCode.AvalonEdit"
    xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
    x:Class="DaxStudio.UI.Views.DocumentView" 
    mc:Ignorable="d" 
    d:DesignWidth="500" 
    d:DesignHeight="400"
    d:DataContext="{x:Static desdata:DesignTimeDataFactory.DocumentViewModel}"
    >
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <res:DesignTimeResourceDictionary DesignTimeSource="pack://application:,,,/Fluent;component/Themes/Generic.xaml"/>
                <res:DesignTimeResourceDictionary DesignTimeSource="pack://application:,,,/DaxStudio.UI;component/Theme/Light.DaxStudio.Theme.xaml"/>
                <ResourceDictionary  Source="pack://application:,,,/DaxStudio.UI;Component/Resources/DaxStudioResources.xaml" />
                <ResourceDictionary  Source="pack://application:,,,/DaxStudio.UI;Component/Resources/MeasureExpressionEditorResources.xaml" />
                <ResourceDictionary  Source="pack://application:,,,/DaxStudio.UI;Component/Resources/Styles/CompletionList.xaml" />
                
            </ResourceDictionary.MergedDictionaries>
            
            <conv:MultiplyWithMinConverter x:Key="multiplyWithMinConverter"/>
            <conv:BoolToNotCollapsedConverter x:Key="BoolToNotCollapsedConverter"/>
            <conv:BoolToCollapsedConverter x:Key="BoolToCollapsedConverter"/>
            <conv:BoolToHiddenConverter x:Key="BoolToHiddenConverter"/>
            <conv:BoolNotConverter x:Key="BoolNotConverter"/>
            <conv:DataBindingDebugConverter x:Key="DataBindingDebugConverter"/>
            <conv:RightMarginMultiplyConverter x:Key="RightMarginMultiplyConverter"/>
            <conv:StringPercentToDoubleConverter x:Key="StringPercentToDoubleConverter"/>
            <conv:BoolToLeftThicknessConverter x:Key="BoolToLeftThicknessConverter"/>
            <SolidColorBrush x:Key="RecordingBrush" Color="{DynamicResource Theme.Default.Back}" />

            <FrameworkElement x:Key="BrushCarrier" x:Name="BrushCarrier" Tag="{StaticResource RecordingBrush}"/>

            <Storyboard x:Key="Pulse" RepeatBehavior="Forever" options:Freeze="true">
                <!--<ColorAnimation Duration="0:0:0.5"
                                                        To="Red"
                                                        AutoReverse="True"
                                                        RepeatBehavior="Forever"
                                                        Storyboard.TargetProperty="(Ellipse.Fill).(SolidColorBrush.Color)"
                                                        />-->

                <ColorAnimationUsingKeyFrames BeginTime="0"
                                              Duration="0:0:0.9"
                                              FillBehavior="HoldEnd"
                                              RepeatBehavior="Forever"
                                              Storyboard.TargetName="BrushCarrier1"
                                              Storyboard.TargetProperty="Tag.Color"
                                              >
                    <EasingColorKeyFrame KeyTime="0:0:0.0" Value="#EDACAF"/>
                    <EasingColorKeyFrame KeyTime="0:0:0.4" Value="#ED1C24">
                        <EasingColorKeyFrame.EasingFunction>
                            <QuarticEase  EasingMode="EaseIn"/>
                        </EasingColorKeyFrame.EasingFunction>
                    </EasingColorKeyFrame>

                    <EasingColorKeyFrame KeyTime="0:0:0.5" Value="#ED1C24">
                        <EasingColorKeyFrame.EasingFunction>
                            <QuarticEase EasingMode="EaseOut"/>
                        </EasingColorKeyFrame.EasingFunction>
                    </EasingColorKeyFrame>

                    <EasingColorKeyFrame KeyTime="0:0:0.9" Value="#EDACAF"/>
                </ColorAnimationUsingKeyFrames>
                <!--<DoubleAnimation Duration="0:0:0.5"
                                                         To="24"
                                                         AutoReverse="True"
                                                         RepeatBehavior="Forever"
                                                         Storyboard.TargetProperty="Width"/>-->


            </Storyboard>

            <Style TargetType="{x:Type Ellipse}" x:Key="Recording">
                <!--<Setter Property="Fill" Value="{DynamicResource Theme.Brush.Default.Fore}"/>-->
                <!--<Setter Property="Fill" Value="{StaticResource RecordingBrush}"/>-->
                <Setter Property="Stroke" Value="#ED1C24"/>
                <Setter Property="StrokeThickness" Value="1"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Width" Value="10"/>
                <Setter Property="Height" Value="10"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <!--<Style.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard x:Name="BeginPulse" Storyboard="{StaticResource Pulse}"/>
                    </EventTrigger>
                </Style.Triggers>-->
                
                <!--<Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsVisible}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="BeginPulse" Storyboard="{StaticResource Pulse}">
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="BeginPulse"/>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </Style.Triggers>-->
                
            </Style>
            
            <Style TargetType="{x:Type avalonedit:CompletionWindow}">
                <Setter Property="WindowStyle" Value="None"></Setter>
                <Setter Property="ResizeMode" Value="NoResize"></Setter>
                <Setter Property="BorderThickness" Value="3"></Setter>
            </Style>

            <Style TargetType="{x:Type avalonedit:InsightWindow}">
                <Setter Property="Background" Value="Coral"/>
            </Style>

            <!--<Style TargetType="dax:DAXEditor">
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.ThemeBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.ThemeForeground}" />
            </Style>-->
            
            <Style x:Key="CustomLayoutDocumentPaneControlStyle" TargetType="{x:Type avalondock:LayoutDocumentPaneControl}">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="0"/>
                <!--<Setter Property="Background" Value="{StaticResource BaseBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource BaseBrush}"/>-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type avalondock:LayoutDocumentPaneControl}">
                            <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="0"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Border Background="Transparent" Grid.RowSpan="2"/>
                                <Grid Panel.ZIndex="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <avalondock:DocumentPaneTabPanel x:Name="HeaderPanel" Grid.Column="0" FlowDirection="LeftToRight" IsItemsHost="True" 
                                                                 Grid.Row="0" KeyboardNavigation.TabIndex="1" />
                                    <!-- Margin="2,2,2,0" -->
                                    <avalondock:DropDownButton x:Name="MenuDropDownButton" Grid.Column="1" Focusable="False" Visibility="Hidden">
                                        <avalondock:DropDownButton.DropDownContextMenu>
                                            <avalondock:ContextMenuEx>
                                                <avalondock:ContextMenuEx.ItemContainerStyle>
                                                    <Style TargetType="{x:Type avalondock:MenuItemEx}">
                                                        <Setter Property="HeaderTemplate" Value="{Binding Root.Manager.DocumentPaneMenuItemHeaderTemplate}"/>
                                                        <Setter Property="HeaderTemplateSelector" Value="{Binding Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}"/>
                                                        <Setter Property="IconTemplate" Value="{Binding Root.Manager.IconContentTemplate}"/>
                                                        <Setter Property="IconTemplateSelector" Value="{Binding Root.Manager.IconContentTemplateSelector}"/>
                                                        <Setter Property="Command">
                                                            <Setter.Value>
                                                                <Binding Path=".">
                                                                    <Binding.Converter>
                                                                        <avalondock:ActivateCommandLayoutItemFromLayoutModelConverter/>
                                                                    </Binding.Converter>
                                                                </Binding>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Style.BasedOn>
                                                            <Style TargetType="{x:Type MenuItem}">
                                                                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                                                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                                                <Setter Property="Background" Value="Transparent"/>
                                                                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                                                                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                                                <Style.Triggers>
                                                                    <Trigger Property="Role" Value="TopLevelHeader">
                                                                        <Setter Property="Padding" Value="7,2,8,3"/>
                                                                        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="Role" Value="TopLevelItem">
                                                                        <Setter Property="Padding" Value="7,2,8,3"/>
                                                                        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="Role" Value="SubmenuHeader">
                                                                        <Setter Property="Padding" Value="2,3"/>
                                                                        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="Role" Value="SubmenuItem">
                                                                        <Setter Property="Padding" Value="2,3"/>
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Style.BasedOn>
                                                    </Style>
                                                </avalondock:ContextMenuEx.ItemContainerStyle>
                                            </avalondock:ContextMenuEx>
                                        </avalondock:DropDownButton.DropDownContextMenu>
                                        <avalondock:DropDownButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">

                                                <Setter Property="Padding" Value="2"/>
                                                <Setter Property="BorderThickness" Value="1"/>
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="BorderBrush" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Center"/>
                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsChecked" Value="True">
                                                                    <Setter Property="BorderBrush" Value="#FF3399FF"/>
                                                                    <Setter Property="Background" Value="#FFE6F0FA"/>
                                                                </Trigger>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="BorderBrush" Value="#FF3399FF"/>
                                                                    <Setter Property="Background" Value="#FFC2E0FF"/>
                                                                </Trigger>
                                                                <Trigger Property="IsKeyboardFocused" Value="True">
                                                                    <Setter Property="BorderBrush" Value="#FF3399FF"/>
                                                                    <Setter Property="Background" Value="#FFC2E0FF"/>
                                                                </Trigger>
                                                                <MultiTrigger>
                                                                    <MultiTrigger.Conditions>
                                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                                        <Condition Property="IsChecked" Value="True"/>
                                                                    </MultiTrigger.Conditions>
                                                                    <Setter Property="BorderBrush" Value="#FF3399FF"/>
                                                                    <Setter Property="Background" Value="#FF99CCFF"/>
                                                                </MultiTrigger>
                                                                <MultiTrigger>
                                                                    <MultiTrigger.Conditions>
                                                                        <Condition Property="IsKeyboardFocused" Value="True"/>
                                                                        <Condition Property="IsChecked" Value="True"/>
                                                                    </MultiTrigger.Conditions>
                                                                    <Setter Property="BorderBrush" Value="#FF3399FF"/>
                                                                    <Setter Property="Background" Value="#FF99CCFF"/>
                                                                </MultiTrigger>
                                                                <Trigger Property="IsPressed" Value="True">
                                                                    <Setter Property="BorderBrush" Value="#FF3399FF"/>
                                                                    <Setter Property="Background" Value="#FF99CCFF"/>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </avalondock:DropDownButton.Style>
                                        <!--<Image>
                                        <Image.Source>
                                            <BitmapImage UriSource="pack://application:,,,/AvalonDock;component/Images/PinDocMenu.png"/>
                                        </Image.Source>
                                    </Image>-->
                                    </avalondock:DropDownButton>
                                </Grid>
                                <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource Theme.Brush.Default.Back}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" HorizontalAlignment="Stretch" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Cycle" VerticalAlignment="Stretch">
                                    <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                                <DataTrigger Binding="{Binding Model.ChildrenCount, RelativeSource={RelativeSource Self}}" Value="0">
                                    <Setter Property="Visibility" TargetName="MenuDropDownButton" Value="Collapsed"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type TabItem}">
                            <Setter Property="Visibility">
                                <Setter.Value>
                                    <Binding Path="IsVisible">
                                        <Binding.Converter>
                                            <avalondock:BoolToVisibilityConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                            <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                        </Style>
                    </Setter.Value>
                </Setter>

                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <avalondock:LayoutDocumentTabItem Model="{Binding}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <avalondock:LayoutDocumentControl Model="{Binding}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>

            </Style>

            <Style x:Key="ButtonImage" TargetType="{x:Type Image}">
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.5" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <UserControl.Triggers>
        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
            <BeginStoryboard Storyboard="{StaticResource Pulse }"/>
        </EventTrigger>
    </UserControl.Triggers>
    <i:Interaction.Behaviors>
        <beh:FindReplaceBehavior />
    </i:Interaction.Behaviors>

    <Grid >
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <FrameworkElement
        x:Name="BrushCarrier1"
        Tag="{StaticResource RecordingBrush}"
        />
        <!-- Theme="{Binding AvalonDockTheme}" -->
        <avalondock:DockingManager x:Name="Document" 
                                   DocumentPaneControlStyle="{DynamicResource CustomLayoutDocumentPaneControlStyle}" 
                                   Background="Transparent"
                                   Margin="0,-1,0,1"
                                   AnchorablesSource="{Binding ToolWindows}"
                                   Grid.Row="0"
                                   beh:AvalonDockLayoutSerializerBehaviour.LoadSavedLayout="True"
                                   
                                   KeyboardNavigation.ControlTabNavigation="None"
                                   FocusManager.FocusedElement="{Binding ElementName=daxEditor}"
                                   Focusable="False"
                                   >

            <!--<avalondock:DockingManager.Theme>
                <avalondock:Vs2013LightTheme/>
            </avalondock:DockingManager.Theme>-->
            <i:Interaction.Behaviors>
                <beh:AvalonDockLayoutSerializerBehaviour />
            </i:Interaction.Behaviors>

            <avalondock:DockingManager.LayoutUpdateStrategy>
                <local:DaxStudioLayoutStrategy/>
            </avalondock:DockingManager.LayoutUpdateStrategy>

            <avalondock:DockingManager.AnchorableHeaderTemplateSelector>
                <selectors:DataGridWindowTemplateSelector>
                    <selectors:DataGridWindowTemplateSelector.TraceTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <!--<TextBlock Text="4" FontFamily="Webdings" Width="10" Padding="0,0,0,0" Margin="0,0,5,0"
                                   Visibility="{Binding Content.IsTraceRunning, Converter={StaticResource BoolToCollapsedConverter}, FallbackValue=Collapsed}"
                                   Foreground="{StaticResource MutedTextBrush}" 
                                   VerticalAlignment="Center"
                                   />-->
                                <Ellipse Margin="0,0,5,0"
                                   Visibility="{Binding Content.IsTraceRunning, Converter={StaticResource BoolToCollapsedConverter}, FallbackValue=Collapsed}"
                                   Style="{StaticResource Recording}" 
                                   Fill="{StaticResource RecordingBrush}"
                                   >
                                    
                                </Ellipse>
                                <Image Source="{DynamicResource pause_tabDrawingImage}" Margin="0,0,5,0"
                                   Visibility="{Binding Content.IsPaused, Converter={StaticResource BoolToCollapsedConverter}, FallbackValue=Collapsed}"/>
                                <!--<TextBlock Text=";" FontFamily="Webdings" Width="10" Padding="0,0,2,0" Margin="0,0,5,0"
                                   Visibility="{Binding Content.IsPaused, Converter={StaticResource BoolToCollapsedConverter}, FallbackValue=Collapsed}"
                                   Foreground="{StaticResource MutedTextBrush}"
                                   VerticalAlignment="Center"
                                    />-->
                                <!--<TextBlock Text="&lt;" FontFamily="Webdings" Width="10" Padding="0,0,2,0" Margin="0,0,5,0"
                                   Visibility="{Binding Content.IsChecked, Converter={StaticResource BoolToNotCollapsedConverter}, FallbackValue=Collapsed}"
                                   Foreground="{StaticResource MutedTextBrush}"
                                   VerticalAlignment="Center"
                                    />-->
                                <TextBlock Text="{Binding Content.Title}" VerticalAlignment="Center"/>
                            </StackPanel>
                        </DataTemplate>
                    </selectors:DataGridWindowTemplateSelector.TraceTemplate>

                    <selectors:DataGridWindowTemplateSelector.DefaultTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Content.Title}"/>
                            </StackPanel>
                        </DataTemplate>
                    </selectors:DataGridWindowTemplateSelector.DefaultTemplate>

                    <selectors:DataGridWindowTemplateSelector.DataGridTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Content.Title}"/>
                            </StackPanel>
                        </DataTemplate>
                    </selectors:DataGridWindowTemplateSelector.DataGridTemplate>
                </selectors:DataGridWindowTemplateSelector>
            </avalondock:DockingManager.AnchorableHeaderTemplateSelector>
            
            <avalondock:DockingManager.AnchorableTitleTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Text="{Binding Content.Title}" TextTrimming="CharacterEllipsis"/>
                    </Grid>
                </DataTemplate>
            </avalondock:DockingManager.AnchorableTitleTemplate>

            <avalondock:DockingManager.AnchorableTitleTemplateSelector>
                <selectors:DataGridWindowTemplateSelector>
                    <selectors:DataGridWindowTemplateSelector.DefaultTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <TextBlock Text="{Binding Content.Title}" TextTrimming="CharacterEllipsis"/>
                            </Grid>
                        </DataTemplate>
                    </selectors:DataGridWindowTemplateSelector.DefaultTemplate>
                    
                    <selectors:DataGridWindowTemplateSelector.TraceTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <TextBlock Text="{Binding Content.Title}" TextTrimming="CharacterEllipsis"/>
                            </Grid>
                        </DataTemplate>
                        
                    </selectors:DataGridWindowTemplateSelector.TraceTemplate>

                    <selectors:DataGridWindowTemplateSelector.DataGridTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <TextBlock Text="{Binding Content.Title}" TextTrimming="CharacterEllipsis"/>
                            </Grid>
                        </DataTemplate>
                    </selectors:DataGridWindowTemplateSelector.DataGridTemplate>

                </selectors:DataGridWindowTemplateSelector>
            </avalondock:DockingManager.AnchorableTitleTemplateSelector>

            <avalondock:DockingManager.LayoutItemContainerStyleSelector>
                <local:PanesStyleSelector>
                    <local:PanesStyleSelector.ToolStyle>
                        <Style TargetType="{x:Type avalondock:LayoutAnchorableItem}">
                            <Setter Property="Title" Value="{Binding Model.Title}"/>
                            <Setter Property="IconSource" Value="{Binding Model.IconSource}"/>
                            <Setter Property="Visibility" Value="{Binding Model.IsVisible, Mode=TwoWay, Converter={StaticResource BoolToHiddenConverter}}"/>
                            <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                            <Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
                            <!--<Setter Property="Layout .AutoHideMinWidth" Value="250"/>-->
                            <!--<Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}"/>-->
                            <!--<Setter Property="CanClose" Value="{Binding Model.CanCloseWindow}" />-->
                            <Setter Property="CanHide" Value="{Binding Model.CanHide}"/>
                            
                            <Setter Property="HideCommand" Value="{Binding Model.HideCommand}"/>
                            <!--<Setter Property="DockAsDocumentCommand" Value="{Binding Content.DockAsDocumentCommand}" />-->
                            
                            <Setter Property="DockAsDocumentCommand" Value="{x:Null}" />
                        </Style>
                    </local:PanesStyleSelector.ToolStyle>
                </local:PanesStyleSelector>
            </avalondock:DockingManager.LayoutItemContainerStyleSelector>

            
            
            <!--
            <avalondock:DockingManager.AnchorablePaneTemplate>
                <ControlTemplate>
                    <StackPanel Orientation="Vertical">
                        <TextBlock>AnchorablePaneTemplate</TextBlock>
                    <ContentControl cal:View.Model="{Binding . }" IsTabStop="False" />
                    </StackPanel>
                </ControlTemplate>
            </avalondock:DockingManager.AnchorablePaneTemplate>
            -->

            <!--<avalondock:DockingManager.AnchorableTitleTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding DisplayName}"></TextBlock>
                </DataTemplate>
            </avalondock:DockingManager.AnchorableTitleTemplate>-->
            <avalondock:DockingManager.LayoutItemTemplateSelector>

                <selectors:ToolWindowTemplateSelector>
                    <selectors:ToolWindowTemplateSelector.Template>
                        <DataTemplate>
                            <ContentControl cal:View.Model="{Binding .}" IsTabStop="False" />
                        </DataTemplate>
                    </selectors:ToolWindowTemplateSelector.Template>
                </selectors:ToolWindowTemplateSelector>
            </avalondock:DockingManager.LayoutItemTemplateSelector>
            
            

            <!-- cal:Message.Attach="[Event DocumentClosing]=[Action DocumentClosing($this)]" -->

            <avalondock:LayoutRoot FocusManager.IsFocusScope="False">
                <!-- Left side Tool Panes -->
                <avalondock:LayoutPanel Orientation="Horizontal">
                    <avalondock:LayoutAnchorablePaneGroup DockMinWidth="150" DockWidth="235" FloatingWidth="200" >
                        <avalondock:LayoutAnchorablePane Name="DockLeft" ap:LayoutAnchorablePaneAutoHideMinWidthHelper.AutoHideMinWidth="250"/>
                    </avalondock:LayoutAnchorablePaneGroup>
                    <avalondock:LayoutAnchorablePaneGroup DockMinWidth="260" DockWidth="260" FloatingWidth="240">
                        <avalondock:LayoutAnchorablePane Name="DockMidLeft"/>
                    </avalondock:LayoutAnchorablePaneGroup>
                    <!-- Main Document Pane -->

                    <avalondock:LayoutPanel Orientation="Vertical">

                        <avalondock:LayoutDocumentPane DockHeight="Auto" >
                            <avalondock:LayoutDocument CanFloat="False"  CanClose="False" ContentId="myDocument"  
                                                       attached:InitialFocusExtentions.SelectAllAndFocus="True"
                                                       FocusManager.FocusedElement="{Binding ElementName=daxEditor}">

                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>

                                    <Border 
                                        Margin="0 4 0 8"
                                        Visibility="{Binding IsViewAsActive, Converter={StaticResource BoolToCollapsedConverter}}"
                                        Grid.ColumnSpan="2"
                                        BorderBrush="{DynamicResource Theme.Brush.InfoBar.Border}"
                                        BorderThickness="1"
                                        CornerRadius="4"
                                        Background="{DynamicResource Theme.Brush.InfoBar.Back}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Image Source="{DynamicResource viewing_as_smallDrawingImage}"  Margin="5 0" VerticalAlignment="Center" Grid.Column="0"/>
                                            <Label x:Name="ViewAsDescription" Content="{Binding ViewAsDescription}" Grid.Column="1" VerticalAlignment="Center" Foreground="{DynamicResource Theme.Brush.InfoBar.Fore}"/>
                                            <Button x:Name="StopViewAs"  Grid.Column="2" Margin="3" Padding="2 0" Background="Transparent"
                                                    cal:Message.Attach="[Event Click]=[Action StopViewAs()]"
                                                    >
                                                <Image Source="{DynamicResource close_infobarDrawingImage}"/>
                                            </Button>
                                        </Grid>

                                    </Border>

                                    <!-- EditorBorder.CornerRadius="8"-->
                                    <dax:DAXEditor x:Name="daxEditor" 
                                                   Margin="0" 
                                                   Padding="8,8,8,8"
                                                   BorderThickness="1"
                                                   BorderBrush="{DynamicResource Theme.Brush.Control.Border}"
                                                   TabIndex="0"
                                                   Grid.Column="0" 
                                                   Grid.Row="1" 
                                                   Grid.RowSpan="2" 
                                                   Grid.ColumnSpan="2" MinWidth="80"
                                                   MinHeight="60"
                                                   LineNumbersForeground="{DynamicResource Theme.Brush.LineNumbers}"
                                                   
                                                   FontSize="{Binding SizeUnitLabel.ScreenPoints, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                   Document ="{Binding Document, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                   EditorSelectionStart="{Binding SelectionStart, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                   EditorSelectionLength="{Binding SelectionLength, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                   EditorCaretOffset="{Binding CaretOffset}" 
                                                   IsEnabled="{Binding ShowMeasureExpressionEditor, Converter={StaticResource BoolNotConverter}}"
                                                   dd:DragDrop.IsDropTarget="True"
                                                   dd:DragDrop.DropHandler="{Binding }"
                                                   dd:DragDrop.DragHandler="{Binding}"
                                                   WordWrap="{Binding WordWrap}"
                                                   ConvertTabsToSpaces="{Binding ConvertTabsToSpaces}"
                                                   IndentationSize="{Binding IndentationSize}"
                                                   cal:Message.Attach="[Event SizeChanged] = [OnEditorSizeChanged($view, $eventArgs)]; [Event ContextMenuOpening] = [EditorContextMenuOpening()]; [Event MouseHover] = [OnEditorHover($source, $eventArgs)]; [Event GotFocus] = [Action GotFocus]"
                                                   fm:FoldingMargin.FoldingMarkerBackgroundBrush="{DynamicResource Theme.Brush.Default.Back}"    
                                                   fm:FoldingMargin.FoldingMarkerBrush="{DynamicResource Theme.Brush.Muted.Fore}"
                                                   fm:FoldingMargin.SelectedFoldingMarkerBackgroundBrush="{DynamicResource Theme.Brush.Default.Back}"
                                                   fm:FoldingMargin.SelectedFoldingMarkerBrush="{DynamicResource Theme.Brush.Muted.Fore}"
                                    >
                                        <!-- attached:DaxEditorFocusExtensions.IsFocused="{Binding IsFocused}"-->
                                        <!--dd:DragDrop.DragHandler="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"-->
                                        <!-- Template="{DynamicResource DAXEditorControlTemplate1}"
                                        EditorSelectedText="{Binding SelectedText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"-->
                                        <i:Interaction.Triggers>
                                            
                                            <i:EventTrigger EventName="DragEnter">
                                                <cal:Action.Target>
                                                    <cal:ActionMessage MethodName="OnDragEnter"/>
                                                </cal:Action.Target>
                                            </i:EventTrigger>
                                            
                                            <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                                                <cal:Action.Target>
                                                    <cal:ActionMessage MethodName="PreviewMouseLeftButtonUp"></cal:ActionMessage>
                                                </cal:Action.Target>
                                            </i:EventTrigger>

                                        </i:Interaction.Triggers>
                                        <ContextMenuService.ContextMenu>
                                            
                                            <ContextMenu ContextMenuOpening="ContextMenu_ContextMenuOpening">
                                                <MenuItem x:Name="Cut"  Header="Cut"
                                                      cal:Message.Attach="Cut()">
                                                    <MenuItem.Icon>
                                                        <Image Source="{DynamicResource cutDrawingImage}"/>
                                                    </MenuItem.Icon>

                                                </MenuItem>
                                                <MenuItem x:Name="Copy" Header="Copy" 
                                                      cal:Message.Attach="Copy()">
                                                    <MenuItem.Icon>
                                                        <Image Source="{DynamicResource copyDrawingImage}"/>
                                                    </MenuItem.Icon>

                                                </MenuItem>
                                                <MenuItem x:Name="Paste" Header="Paste"
                                                      cal:Message.Attach="Paste()">
                                                    <MenuItem.Icon>
                                                        <Image Source="{DynamicResource clipboardDrawingImage}"/>
                                                    </MenuItem.Icon>

                                                </MenuItem>
                                                <Separator />
                                                <MenuItem x:Name="SelecteAll" Header="Select All" InputGestureText="Ctrl+A"
                                                      cal:Message.Attach="SelectAll()">
                                                </MenuItem>
                                                <Separator />
                                                <MenuItem x:Name="CommentSelection" Header="Comment" 
                                                      cal:Message.Attach="CommentSelection()">
                                                    <MenuItem.Icon>
                                                        <Image Source="{DynamicResource commentDrawingImage}"/>
                                                    </MenuItem.Icon>
                                                    
                                                </MenuItem>
                                                <!-- Icon="{DynamicResource UncommentIcon}" -->
                                                <MenuItem x:Name="UncommentSelection" Header="Uncomment" 
                                                      cal:Message.Attach="UnCommentSelection()">
                                                    <MenuItem.Icon>
                                                        <Image Source="{DynamicResource uncommentDrawingImage}"/>
                                                    </MenuItem.Icon>
                                                    
                                                </MenuItem>
                                                <Separator/>
                                                <MenuItem x:Name="LookupDaxGuide" 
                                                          Header="{Binding LookupDaxGuideHeader}"
                                                          cal:Message.Attach="LookupDaxGuide()" 
                                                          IsEnabled="{Binding CanLookupDaxGuide}">
                                                    <MenuItem.Icon>
                                                        <Image Source="{DynamicResource dax_guide_smallDrawingImage}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                            </ContextMenu>
                                        </ContextMenuService.ContextMenu>
                                        <dax:DAXEditor.Resources>
                                            <Style TargetType="{x:Type Line}">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </Style>
                                        </dax:DAXEditor.Resources>
                                    </dax:DAXEditor>

                                    <!-- Help Watermark -->
                                    <!--<TextBlock
                                        Grid.Row="1"
                                        Grid.RowSpan="2"
                                        Grid.ColumnSpan="2"
                                        VerticalAlignment="Top"
                                        HorizontalAlignment="Left"
                                        FontWeight="Bold"
                                        FontSize="{Binding ElementName=daxEditor, Path=FontSize}"
                                        FontFamily="Courier New"
                                        Foreground="{DynamicResource Theme.Brush.Muted.Fore}"
                                        Margin="40 10 0 0"
                                        >Enter your DAX query here...</TextBlock>-->
                                    <Grid Margin="10" Grid.Row="1"
                                                    Grid.RowSpan="2"
                                                    Grid.ColumnSpan="2">
                                        <ContentControl x:Name="HelpWatermark"
                                                        cal:View.Model="{Binding HelpWatermark}" 
                                                        cal:View.ApplyConventions="true"
                                                        HorizontalAlignment="Left"
                                                        VerticalAlignment="Top"
                                                        Margin="{Binding UseIndentCodeFolding , Converter={StaticResource BoolToLeftThicknessConverter}, ConverterParameter=18.0}"
                                                        >
                                            <ContentControl.LayoutTransform>
                                                <ScaleTransform ScaleX="{Binding SizeUnitLabel.StringValue, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringPercentToDoubleConverter}}" 
                                                                ScaleY="{Binding SizeUnitLabel.StringValue, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringPercentToDoubleConverter}}">
                                                
                                                </ScaleTransform>
                                            </ContentControl.LayoutTransform>
                                        </ContentControl>
                                    </Grid>
                                    <!-- Floats over the main editor control -->
                                    <!-- Background="Gray" Opacity=".7"-->
                                    <Border x:Name="borExpressionBackground" 
                                            Visibility="{Binding ShowMeasureExpressionEditor, Converter={StaticResource BoolToCollapsedConverter}}"                                            
                                            Grid.RowSpan="3"  
                                            Grid.ColumnSpan="2" 
                                            Style="{StaticResource FadeInOut}"/>

                                    <!-- Measure Editor View Visibility="{Binding ShowMeasureExpressionEditor, Converter={StaticResource BoolToCollapsedConverter}}" -->
                                    <Border x:Name="brdExpressionEditor" 
                                            Grid.RowSpan="3"  
                                            Grid.ColumnSpan="2"
                                            Style="{StaticResource SlideInOut}">
                                        <ContentControl x:Name="MeasureExpressionEditor"
                                                        MinWidth="50"
                                                        Grid.RowSpan="2"  
                                                        Grid.ColumnSpan="2"
                                                        Margin="2,10,40,30"
                                                        Visibility="Visible"
                                                        cal:View.Model="{Binding MeasureExpressionEditor}" cal:View.ApplyConventions="true">
                                        
                                        </ContentControl>
                                        <Border.Tag>
                                            <sys:Double>1.0</sys:Double>
                                        </Border.Tag>

                                        <Border.Margin>
                                            <MultiBinding Converter="{StaticResource RightMarginMultiplyConverter}" ConverterParameter="0 0 0 0">
                                                <Binding Path="ActualWidth" ElementName="daxEditor"/>
                                                <Binding ElementName="brdExpressionEditor" Path="Tag" />
                                            </MultiBinding>
                                        </Border.Margin>

                                    </Border>


                                    <ContentControl x:Name="FindReplaceDialog" 
                                                HorizontalAlignment="Right" 
                                                VerticalAlignment="Top"
                                                Width="450"
                                                Margin="0,12,21,0" 
                                                Grid.Column="1" Grid.Row="1"
                                                cal:View.Model="{Binding FindReplaceDialog}" cal:View.ApplyConventions="true"/>
                                </Grid>
                            </avalondock:LayoutDocument>
                        </avalondock:LayoutDocumentPane>


                        <!-- Bottom Output panes -->

                        <avalondock:LayoutAnchorablePaneGroup Orientation="Vertical" DockMinHeight="70" DockHeight="300">

                            <avalondock:LayoutAnchorablePane Name="DockBottom" DockMinHeight="70"/>
                        </avalondock:LayoutAnchorablePaneGroup>
                    </avalondock:LayoutPanel>

                </avalondock:LayoutPanel>

            </avalondock:LayoutRoot>

            
            
            <avalondock:DockingManager.AnchorableContextMenu>
                <ContextMenu>
                    <MenuItem Header="Float" Command="{Binding Path=FloatCommand}"/>
                    <MenuItem Header="Dock" Command="{Binding Path=DockCommand}"/>
                    <MenuItem Header="Dock as Tabbed Document" Visibility="Collapsed"/>
                    <MenuItem Header="Auto Hide" Command="{Binding Path=AutoHideCommand}"/>
                    <MenuItem Header="Hide" Command="{Binding Path=HideCommand}" />
                    <!--<MenuItem Header="Close" Command="{Binding Path=CloseCommand}"/>-->
                </ContextMenu>
            </avalondock:DockingManager.AnchorableContextMenu>
        </avalondock:DockingManager>

    </Grid>
</UserControl>
